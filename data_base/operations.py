import random

from data_base.db import session
from data_base.models import Student, Mentor, Payment
from datetime import datetime, timedelta
from sqlalchemy import or_, func


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
# def add_student(fio, telegram, start_date, training_type, total_cost, payment_amount, fully_paid, commission):
#     mentor_id = assign_mentor(training_type)
#     try:
#
#         student = Student(
#             fio=fio,
#             telegram=telegram,
#             start_date=start_date,
#             training_type=training_type,
#             total_cost=total_cost,
#             payment_amount=payment_amount,
#             fully_paid=fully_paid,
#             commission=commission,
#             mentor_id=mentor_id
#         )
#         session.add(student)
#         session.commit()
#     except Exception as e:
#         session.rollback()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
def get_all_students():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤."""
    return session.query(Student).all()


def get_student_by_fio_or_telegram(value):
    """
    –ò—â–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –§–ò–û –∏–ª–∏ Telegram.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
    """
    try:
        student = session.query(Student).filter(
            (Student.fio == value) | (Student.telegram == value)
        ).first()
        if not student:
            return None
        return student
    except Exception as e:
        return None


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞
def update_student(student_id, updates):
    student = session.query(Student).get(student_id)
    if not student:
        raise ValueError("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    for key, value in updates.items():
        setattr(student, key, value)
    session.commit()


# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
def delete_student(student_id):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    student = session.query(Student).get(student_id)
    if student:
        session.delete(student)
        session.commit()


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_general_statistics():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    students = session.query(Student).all()
    total_students = len(students)
    fully_paid = sum(1 for student in students if student.fully_paid == "–î–∞")
    training_types = {}

    for student in students:
        training_types[student.training_type] = training_types.get(student.training_type, 0) + 1

    return {
        "total_students": total_students,
        "fully_paid": fully_paid,
        "training_types": training_types
    }


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –ø–µ—Ä–∏–æ–¥—É
def get_students_by_period(start_date, end_date):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
    return session.query(Student).filter(
        Student.start_date.between(start_date, end_date)
    ).all()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –∑–≤–æ–Ω–∫–∞–º
def get_students_with_no_calls():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–≤–Ω–æ –Ω–µ –∑–≤–æ–Ω–∏–ª–∏."""
    twenty_days_ago = datetime.now() - timedelta(days=20)
    # –§–∏–ª—å—Ç—Ä —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –±–µ–∑ –∑–≤–æ–Ω–∫–æ–≤ –∏ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –∑–≤–æ–Ω–∫–æ–º –±–æ–ª–µ–µ 20 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
    return session.query(Student).filter(
        or_(
            Student.last_call_date == None,  # –°—Ç—É–¥–µ–Ω—Ç—ã –±–µ–∑ –¥–∞—Ç—ã –∑–≤–æ–Ω–∫–∞
            func.to_date(Student.last_call_date, 'DD.MM.YYYY') < twenty_days_ago
            # –°—Ç—É–¥–µ–Ω—Ç—ã, –∑–≤–æ–Ω–∏–≤—à–∏–µ –±–æ–ª–µ–µ 20 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        )
    ).all()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π –ø–æ –æ–ø–ª–∞—Ç–µ
def get_students_with_unpaid_payment():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—É—á–∞—é—Ç—Å—è –±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞, –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫—É—Ä—Å –∏ –Ω–µ –¥–µ–ª–∞–ª–∏ –¥–æ–ø–ª–∞—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü."""

    # –î–∞—Ç–∞ –º–µ—Å—è—Ü –Ω–∞–∑–∞–¥
    one_month_ago = datetime.now() - timedelta(days=30)

    # –ó–∞–ø—Ä–æ—Å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö —É—Å–ª–æ–≤–∏—è–º
    students = session.query(Student).filter(
        Student.start_date <= one_month_ago,  # –û–±—É—á–∞—é—Ç—Å—è –±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞
        Student.training_status.in_(["–£—á–∏—Ç—Å—è", "–£—Å—Ç—Ä–æ–∏–ª—Å—è"]),  # –°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è
        Student.fully_paid == "–ù–µ—Ç"  # –ù–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø–ª–∞—á–µ–Ω–æ
    ).all()

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Ö, –∫—Ç–æ **–Ω–µ –¥–µ–ª–∞–ª –¥–æ–ø–ª–∞—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü**
    unpaid_students = []
    for student in students:
        last_payment = session.query(func.max(Payment.payment_date)).filter(
            Payment.student_id == student.id,
            Payment.comment == "–î–æ–ø–ª–∞—Ç–∞",
            Payment.payment_date >= one_month_ago  # –ò—â–µ–º –¥–æ–ø–ª–∞—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
        ).scalar()

        if not last_payment:  # –ï—Å–ª–∏ –¥–æ–ø–ª–∞—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü **–Ω–µ –±—ã–ª–æ**, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
            unpaid_students.append(student)

    return unpaid_students


def get_students_by_training_type(training_type):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø—É –æ–±—É—á–µ–Ω–∏—è.

    Args:
        training_type (str): –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–§—É–ª–ª—Å—Ç–µ–∫").

    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º –æ–±—É—á–µ–Ω–∏—è.
    """
    return session.query(Student).filter(Student.training_type == training_type).all()


# def assign_mentor(training_type):
#     """
#     –ù–∞–∑–Ω–∞—á–∞–µ—Ç –º–µ–Ω—Ç–æ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
#     - –§—É–ª–ª—Å—Ç–µ–∫ ‚Üí –í—Å–µ–≥–¥–∞ –º–µ–Ω—Ç–æ—Ä —Å ID = 1
#     - –ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Üí 30% ID = 3, 70% –¥—Ä—É–≥–∏–µ –º–µ–Ω—Ç–æ—Ä—ã —Å —ç—Ç–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
#     - –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Üí 30% ID = 1, 70% –¥—Ä—É–≥–∏–µ –º–µ–Ω—Ç–æ—Ä—ã —Å —ç—Ç–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
#     """
#     print(f"üìå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—Ç–æ—Ä–∞ –¥–ª—è –∫—É—Ä—Å–∞: {training_type}")
#
#     # –§—É–ª–ª—Å—Ç–µ–∫ –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç –º–µ–Ω—Ç–æ—Ä–∞ —Å ID = 1
#     if training_type == "–§—É–ª–ª—Å—Ç–µ–∫":
#         print("üíº –ù–∞–∑–Ω–∞—á–µ–Ω –º–µ–Ω—Ç–æ—Ä –¥–ª—è –§—É–ª–ª—Å—Ç–µ–∫ (ID: 1)")
#         return 1
#
#     # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –º–µ–Ω—Ç–æ—Ä–æ–≤ –¥–ª—è –¥—Ä—É–≥–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
#     mentors = session.query(Mentor).all()
#     print(f"üë• –í—Å–µ –º–µ–Ω—Ç–æ—Ä—ã: {[m.id for m in mentors]}")
#
#     if training_type == "–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
#         direction = "–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
#         main_mentor_id = 3  # –ì–ª–∞–≤–Ω—ã–π –º–µ–Ω—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#     else:
#         direction = "–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
#         main_mentor_id = 1  # –ì–ª–∞–≤–Ω—ã–π –º–µ–Ω—Ç–æ—Ä –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#
#     # –§–∏–ª—å—Ç—Ä—É–µ–º –º–µ–Ω—Ç–æ—Ä–æ–≤ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
#     mentors_in_direction = [m for m in mentors if m.direction == direction]
#
#     # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–Ω—Ç–æ—Ä–æ–≤ –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
#     if len(mentors_in_direction) == 0:
#         print("‚ùå –ù–µ—Ç –º–µ–Ω—Ç–æ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è!")
#         return None
#
#     main_mentor = next((m for m in mentors_in_direction if m.id == main_mentor_id), None)
#     other_mentors = [m for m in mentors_in_direction if m.id != main_mentor_id]
#
#     print(f"üíº –ì–ª–∞–≤–Ω—ã–π –º–µ–Ω—Ç–æ—Ä (ID: {main_mentor.id if main_mentor else 'None'})")
#     print(f"üíº –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ–Ω—Ç–æ—Ä—ã: {[m.id for m in other_mentors]}")
#
#     # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–µ–Ω—Ç–æ—Ä ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
#     if not main_mentor or len(mentors_in_direction) == 1:
#         return mentors_in_direction[0].id
#
#     # 30% –≥–ª–∞–≤–Ω—ã–π –º–µ–Ω—Ç–æ—Ä, 70% —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–∂–¥—É –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏
#     mentor_id = random.choices(
#         population=[main_mentor.id] + [m.id for m in other_mentors],
#         weights=[30] + [70 / len(other_mentors)] * len(other_mentors),
#         k=1
#     )[0]
#
#     print(f"üéØ –ù–∞–∑–Ω–∞—á–µ–Ω –º–µ–Ω—Ç–æ—Ä (ID: {mentor_id})")
#     return mentor_id


