from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from data_base.operations import (
    get_career_consultant_by_telegram,
    get_students_by_career_consultant,
    assign_student_to_career_consultant
)
from bot.keyboards.career_consultant_keyboards import (
    get_career_consultant_main_keyboard
)
from commands.authorized_users import AUTHORIZED_USERS, NOT_ADMINS
from commands.states import SELECT_STUDENT, CONFIRM_ASSIGNMENT
from datetime import datetime, timedelta


async def career_consultant_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤."""
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞—Ä—å–µ—Ä–Ω—ã–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º –≤ –ë–î
    consultant = get_career_consultant_by_telegram(f"@{username}")
    if not consultant or not consultant.is_active:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤ –∏–ª–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
        return ConversationHandler.END
    
    context.user_data["consultant_id"] = consultant.id
    context.user_data["consultant_name"] = consultant.full_name
    
    await update.message.reply_text(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {consultant.full_name}!\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_career_consultant_main_keyboard()
    )
    return ConversationHandler.END


async def exit_career_consultant_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞."""
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –ë–î
    consultant = get_career_consultant_by_telegram(f"@{username}")
    if not consultant or not consultant.is_active:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤ –∏–ª–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
        return ConversationHandler.END
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from commands.start_commands import exit_to_main_menu
    return await exit_to_main_menu(update, context)


async def show_assign_student_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞."""
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –ë–î
    consultant = get_career_consultant_by_telegram(f"@{username}")
    if not consultant or not consultant.is_active:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤ –∏–ª–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
        return ConversationHandler.END
    
    context.user_data["consultant_id"] = consultant.id
    
    await update.message.reply_text(
        "üîó –í–≤–µ–¥–∏—Ç–µ Telegram —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è:\n"
        "–ü—Ä–∏–º–µ—Ä: @username",
        reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
    )
    return SELECT_STUDENT


async def handle_student_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ Telegram —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è."""
    user_input = update.message.text.strip()
    
    if user_input == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "‚ùå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_career_consultant_main_keyboard()
        )
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç Telegram
    if not user_input.startswith("@"):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username",
            reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
        )
        return SELECT_STUDENT
    
    # –ò—â–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ Telegram
    from data_base.operations import get_student_by_fio_or_telegram
    student = get_student_by_fio_or_telegram(user_input)
    
    if not student:
        await update.message.reply_text(
            f"‚ùå –°—Ç—É–¥–µ–Ω—Ç —Å Telegram {user_input} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
        )
        return SELECT_STUDENT
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –ª–∏ —É–∂–µ —Å—Ç—É–¥–µ–Ω—Ç
    if student.career_consultant_id:
        await update.message.reply_text(
            f"‚ùå –°—Ç—É–¥–µ–Ω—Ç {student.fio} —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞ –¥—Ä—É–≥–∏–º –∫–∞—Ä—å–µ—Ä–Ω—ã–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º.",
            reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
        )
        return SELECT_STUDENT
    
    context.user_data["selected_student"] = student
    
    await update.message.reply_text(
        f"üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ:\n\n"
        f"üë§ –°—Ç—É–¥–µ–Ω—Ç: {student.fio}\n"
        f"üì± Telegram: {user_input}\n"
        f"üìö –ö—É—Ä—Å: {student.training_type}\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä–µ–ø–∏—Ç—å —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑–∞ —Å–æ–±–æ–π?",
        reply_markup=ReplyKeyboardMarkup([
            ["‚úÖ –î–∞, –∑–∞–∫—Ä–µ–ø–∏—Ç—å"],
            ["‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å"]
        ], resize_keyboard=True)
    )
    return CONFIRM_ASSIGNMENT


async def handle_assignment_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞."""
    user_input = update.message.text.strip()
    
    if user_input == "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å":
        await update.message.reply_text(
            "‚ùå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_career_consultant_main_keyboard()
        )
        return ConversationHandler.END
    
    if user_input == "‚úÖ –î–∞, –∑–∞–∫—Ä–µ–ø–∏—Ç—å":
        consultant_id = context.user_data.get("consultant_id")
        student = context.user_data.get("selected_student")
        
        try:
            assign_student_to_career_consultant(student.id, consultant_id)
            await update.message.reply_text(
                f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç {student.fio} ({student.telegram}) —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞ –≤–∞–º–∏!",
                reply_markup=get_career_consultant_main_keyboard()
            )
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏: {str(e)}",
                reply_markup=get_career_consultant_main_keyboard()
            )
        
        return ConversationHandler.END
    
    # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    await update.message.reply_text(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '‚úÖ –î–∞, –∑–∞–∫—Ä–µ–ø–∏—Ç—å' –∏–ª–∏ '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å'",
        reply_markup=ReplyKeyboardMarkup([
            ["‚úÖ –î–∞, –∑–∞–∫—Ä–µ–ø–∏—Ç—å"],
            ["‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å"]
        ], resize_keyboard=True)
    )
    return CONFIRM_ASSIGNMENT


async def show_career_consultant_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞."""
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –ë–î
    consultant = get_career_consultant_by_telegram(f"@{username}")
    if not consultant or not consultant.is_active:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤ –∏–ª–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º
    students = get_students_by_career_consultant(consultant.id)
    
    response = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ {consultant.full_name}:\n\n"
        f"üë• –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(students)}\n\n"
    )
    
    if students:
        response += "üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n"
        for student in students:
            response += f"‚Ä¢ {student.fio} ({student.telegram}) - {student.training_type}\n"
    else:
        response += "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤."
    
    await update.message.reply_text(
        response,
        reply_markup=get_career_consultant_main_keyboard()
    )
    return ConversationHandler.END