from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CallbackQueryHandler
from data_base.operations import (
    get_all_career_consultants, 
    get_career_consultant_by_telegram,
    get_students_by_career_consultant,
    assign_student_to_career_consultant,
    calculate_career_consultant_salary,
    get_all_students
)
from bot.keyboards.career_consultant_keyboards import (
    get_career_consultant_main_keyboard,
    get_student_selection_keyboard,
    get_confirmation_keyboard
)
from commands.authorized_users import AUTHORIZED_USERS, NOT_ADMINS, CAREER_CONSULTANTS
from datetime import datetime, timedelta

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤
SELECT_STUDENT = "SELECT_STUDENT"
CONFIRM_ASSIGNMENT = "CONFIRM_ASSIGNMENT"


async def career_consultant_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤."""
    user_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞—Ä—å–µ—Ä–Ω—ã–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º
    if user_id not in CAREER_CONSULTANTS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞.")
        return ConversationHandler.END
    
    consultant = get_career_consultant_by_telegram(f"@{update.message.from_user.username}")
    if not consultant:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤.")
        return ConversationHandler.END
    
    context.user_data["consultant_id"] = consultant.id
    context.user_data["consultant_name"] = consultant.full_name
    
    await update.message.reply_text(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {consultant.full_name}!\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_career_consultant_main_keyboard()
    )
    return ConversationHandler.END


async def show_assign_student_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞."""
    user_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if user_id not in CAREER_CONSULTANTS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞.")
        return ConversationHandler.END
    
    consultant = get_career_consultant_by_telegram(f"@{update.message.from_user.username}")
    if not consultant:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤.")
        return ConversationHandler.END
    
    context.user_data["consultant_id"] = consultant.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –∑–∞ –∫–∞—Ä—å–µ—Ä–Ω—ã–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞–º–∏
    all_students = get_all_students()
    available_students = [s for s in all_students if not s.career_consultant_id]
    
    if not available_students:
        await update.message.reply_text(
            "üìù –í—Å–µ —Å—Ç—É–¥–µ–Ω—Ç—ã —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –∑–∞ –∫–∞—Ä—å–µ—Ä–Ω—ã–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞–º–∏.",
            reply_markup=get_career_consultant_main_keyboard()
        )
        return ConversationHandler.END
    
    context.user_data["available_students"] = available_students
    
    await update.message.reply_text(
        "üîó –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è:",
        reply_markup=get_student_selection_keyboard(available_students)
    )
    return SELECT_STUDENT


async def handle_student_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "cancel_assignment":
        await query.edit_message_text(
            "‚ùå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_career_consultant_main_keyboard()
        )
        return ConversationHandler.END
    
    if query.data.startswith("assign_student_"):
        student_id = int(query.data.split("_")[2])
        available_students = context.user_data.get("available_students", [])
        student = next((s for s in available_students if s.id == student_id), None)
        
        if not student:
            await query.edit_message_text(
                "‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_career_consultant_main_keyboard()
            )
            return ConversationHandler.END
        
        context.user_data["selected_student"] = student
        
        await query.edit_message_text(
            f"üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ:\n\n"
            f"üë§ –°—Ç—É–¥–µ–Ω—Ç: {student.fio}\n"
            f"üì± Telegram: @{student.telegram}\n"
            f"üìö –ö—É—Ä—Å: {student.training_type}\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä–µ–ø–∏—Ç—å —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑–∞ —Å–æ–±–æ–π?",
            reply_markup=get_confirmation_keyboard(student_id)
        )
        return CONFIRM_ASSIGNMENT


async def handle_assignment_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "cancel_assignment":
        await query.edit_message_text(
            "‚ùå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_career_consultant_main_keyboard()
        )
        return ConversationHandler.END
    
    if query.data.startswith("confirm_assign_"):
        student_id = int(query.data.split("_")[2])
        consultant_id = context.user_data.get("consultant_id")
        student = context.user_data.get("selected_student")
        
        try:
            assign_student_to_career_consultant(student_id, consultant_id)
            await query.edit_message_text(
                f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç {student.fio} (@{student.telegram}) —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞ –≤–∞–º–∏!",
                reply_markup=get_career_consultant_main_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏: {str(e)}",
                reply_markup=get_career_consultant_main_keyboard()
            )
        
        return ConversationHandler.END


async def show_career_consultant_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞."""
    user_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if user_id not in CAREER_CONSULTANTS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞.")
        return ConversationHandler.END
    
    consultant = get_career_consultant_by_telegram(f"@{update.message.from_user.username}")
    if not consultant:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤.")
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º
    students = get_students_by_career_consultant(consultant.id)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    today = datetime.now()
    start_of_month = today.replace(day=1)
    salary = calculate_career_consultant_salary(consultant.id, start_of_month, today)
    
    response = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ {consultant.full_name}:\n\n"
        f"üë• –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(students)}\n"
        f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {salary} —Ä—É–±.\n\n"
    )
    
    if students:
        response += "üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n"
        for student in students:
            response += f"‚Ä¢ {student.fio} (@{student.telegram}) - {student.training_type}\n"
    else:
        response += "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤."
    
    await update.message.reply_text(
        response,
        reply_markup=get_career_consultant_main_keyboard()
    )
    return ConversationHandler.END