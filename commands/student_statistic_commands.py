from datetime import datetime

from sqlalchemy import func

from commands.authorized_users import AUTHORIZED_USERS
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from commands.states import STATISTICS_MENU, COURSE_TYPE_MENU, START_PERIOD, END_PERIOD
from data_base.db import session
from data_base.models import Student, Payment
from data_base.operations import get_general_statistics, get_students_by_period, get_students_by_training_type


async def show_statistics_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    user_id = update.message.from_user.id
    if user_id not in AUTHORIZED_USERS:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    await update.message.reply_text(
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(
            [
                ["üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìö –ü–æ —Ç–∏–ø—É –æ–±—É—á–µ–Ω–∏—è"],
                ["üìÖ –ü–æ –ø–µ—Ä–∏–æ–¥—É", "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]
            ],
            one_time_keyboard=True
        )
    )
    return STATISTICS_MENU


async def show_general_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º.
    """
    statistics = get_general_statistics()
    total_students = statistics.get("total_students", 0)
    fully_paid = statistics.get("fully_paid", 0)
    not_fully_paid = total_students - fully_paid

    await update.message.reply_text(
        f"üìã –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üë• –í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {total_students}\n"
        f"‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø–ª–∞—Ç–∏–ª–∏: {fully_paid}\n"
        f"‚ùå –ù–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é: {not_fully_paid}",
        reply_markup=ReplyKeyboardMarkup(
            [["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]],
            one_time_keyboard=True
        )
    )
    return STATISTICS_MENU


async def show_course_type_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    await update.message.reply_text(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(
            [
                ["üë®‚Äçüíª –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "ü§ñ –ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "üíª –§—É–ª–ª—Å—Ç–µ–∫"],
                ["üîô –ù–∞–∑–∞–¥"]
            ],
            one_time_keyboard=True
        )
    )
    return COURSE_TYPE_MENU


async def show_course_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE, course_type, emoji):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –æ–ø–ª–∞—Ç—ã.
    """
    students = get_students_by_training_type(course_type)

    response = (
        f"{emoji} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {course_type}:\n\n"
        f"üë• –í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(students)}\n"
    )

    if students:
        for student in students:
            response += (
                f"- {student.fio} ({student.telegram}) "
                f"  –û–ø–ª–∞—á–µ–Ω–æ: {student.payment_amount} –∏–∑ {student.total_cost}\n"
            )
    else:
        response += "–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç."

    await update.message.reply_text(
        response,
        reply_markup=ReplyKeyboardMarkup(
            [["üîô –ù–∞–∑–∞–¥"]],
            one_time_keyboard=True
        )
    )
    return COURSE_TYPE_MENU



async def show_manual_testing_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä—É—á–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.
    """
    return await show_course_statistics(update, context, "–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "üë®‚Äçüíª")


async def show_automation_testing_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.
    """
    return await show_course_statistics(update, context, "–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "ü§ñ")


async def show_fullstack_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –§—É–ª–ª—Å—Ç–µ–∫.
    """
    return await show_course_statistics(update, context, "–§—É–ª–ª—Å—Ç–µ–∫", "üíª")


async def request_period_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞.
    """
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    return START_PERIOD


async def handle_period_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞.
    """
    try:
        start_date_text = update.message.text.strip()
        start_date = datetime.strptime(start_date_text, "%d.%m.%Y")
        context.user_data["start_date"] = start_date
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return END_PERIOD
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10.11.2024):")
        return START_PERIOD


async def handle_period_end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
        end_date_text = update.message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –¥–∞—Ç—ã –Ω–µ –ø—É—Å—Ç
        if not end_date_text:
            await update.message.reply_text("–î–∞—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
            return END_PERIOD

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        if isinstance(end_date_text, str):
            end_date = datetime.strptime(end_date_text, "%d.%m.%Y")
        else:
            end_date = end_date_text

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∏–∑ context.user_data
        start_date = context.user_data.get("start_date")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º datetime
        if not start_date:
            await update.message.reply_text("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.")
            return START_PERIOD
        if isinstance(start_date, str):
            start_date = datetime.strptime(start_date, "%d.%m.%Y")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π
        if end_date < start_date:
            await update.message.reply_text("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.")
            return END_PERIOD

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ context
        context.user_data["end_date"] = end_date

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        return await show_period_statistics(update, context)

    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
        return END_PERIOD
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return END_PERIOD


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è –æ–±—ä–µ–∫—Ç—ã date
def calc_total_salaries_for_dates(start_date, end_date, session) -> float:
    payments = session.query(Payment).filter(
        Payment.payment_date >= start_date,
        Payment.payment_date <= end_date,
        Payment.status == "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
    ).all()

    mentor_salaries = {}
    for p in payments:
        amt = float(p.amount)
        stud = session.query(Student).get(p.student_id)
        if not stud or not p.mentor_id:
            continue

        m_id = p.mentor_id
        mentor_salaries.setdefault(m_id, 0)

        # 1) –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å Fullstack –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ
        if stud.training_type == "–§—É–ª–ª—Å—Ç–µ–∫":
            continue

        # 2) –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫—É—Ä—Å–∞
        if m_id == 1 and stud.training_type == "–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
            pct = 0.3
        elif m_id == 3 and stud.training_type == "–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
            pct = 0.3
        else:
            pct = 0.2
        mentor_salaries[m_id] += amt * pct

    # 3) –ë–æ–Ω—É—Å—ã 10%
    for p in payments:
        stud = session.query(Student).get(p.student_id)
        if not stud or stud.training_type == "–§—É–ª–ª—Å—Ç–µ–∫":
            continue

        if p.mentor_id != 1 and stud.training_type.lower().strip() == "—Ä—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
            mentor_salaries.setdefault(1, 0)
            mentor_salaries[1] += float(p.amount) * 0.1

        if p.mentor_id != 3 and stud.training_type == "–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
            mentor_salaries.setdefault(3, 0)
            mentor_salaries[3] += float(p.amount) * 0.1

    # 4) Fullstack‚Äë–±–æ–Ω—É—Å—ã
    fs_students = session.query(Student).filter(
        Student.training_type == "–§—É–ª–ª—Å—Ç–µ–∫",
        Student.start_date >= start_date,
        Student.start_date <= end_date
    ).all()
    if fs_students:
        mentor_salaries.setdefault(1, 0)
        mentor_salaries[1] += len(fs_students) * 5000

    return sum(mentor_salaries.values())

async def show_period_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–µ—Ä–∏–æ–¥—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.
    """
    start_date = context.user_data.get("start_date")
    end_date = context.user_data.get("end_date")

    if not start_date or not end_date:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –î–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return STATISTICS_MENU

    if end_date < start_date:
        await update.message.reply_text("‚ö† –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.")
        return END_PERIOD

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –Ω–∞—á–∞–≤—à–∏—Ö –æ–±—É—á–µ–Ω–∏–µ –≤ –ø–µ—Ä–∏–æ–¥
    students = session.query(Student).filter(
        Student.start_date.between(start_date, end_date)
    ).all()

    student_count = len(students)

    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–≤–∫–ª—é—á–∞—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –∏ –¥–æ–ø–ª–∞—Ç—ã)
    total_paid = session.query(func.sum(Payment.amount)).filter(
        Payment.payment_date.between(start_date, end_date)
    ).scalar() or 0

    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –¥–æ–ø–ª–∞—Ç (–≥–¥–µ comment = "–î–æ–ø–ª–∞—Ç–∞")
    additional_payments = session.query(func.sum(Payment.amount)).filter(
        Payment.payment_date.between(start_date, end_date),
        Payment.comment == "–î–æ–ø–ª–∞—Ç–∞"
    ).scalar() or 0

    additional_commission = session.query(func.sum(Payment.amount)).filter(
        Payment.payment_date.between(start_date, end_date),
        Payment.comment == "–ö–æ–º–∏—Å—Å–∏—è"
    ).scalar() or 0

    # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    total_cost = sum(student.total_cost for student in students)
    payment_amount = sum(student.payment_amount for student in students)

    # –û—Å—Ç–∞—Ç–æ–∫ –∫ –æ–ø–ª–∞—Ç–µ
    remaining_payment = total_cost - payment_amount

    # üìä –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ **—Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ**
    if student_count == 0:
        response = (
            f"üìÖ –í –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')} "
            f"—Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        )
    else:
        response = (
            f"üìÖ –í –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}:\n"
            f"üë• –ù–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {student_count}\n\n"
        )

        for student in students:
            response += (
                f"- {student.fio} ({student.telegram}) "
                f"  –û–ø–ª–∞—á–µ–Ω–æ: {student.payment_amount} –∏–∑ {student.total_cost}\n"
            )

        # –≥–¥–µ-—Ç–æ –≤ –≤–∞—à–µ–º —Ö—ç–Ω–¥–ª–µ—Ä–µ, –ø–æ—Å–ª–µ —Ä–∞—Å—á—ë—Ç–∞ –≤—Å–µ—Ö —á–∏—Å–µ–ª
        total_salaries = calc_total_salaries_for_dates(start_date, end_date, session)
        response += (
            f"\nüí∞ –û–ø–ª–∞—á–µ–Ω–æ –∑–∞ –æ–±—É—á–µ–Ω–∏–µ: {int(payment_amount):,} —Ä—É–±.\n"
            f"üìö –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è: {int(total_cost):,} —Ä—É–±.\n"
            f"‚ûï –û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ø–ª–∞—Ç: {int(additional_payments):,} —Ä—É–±.\n"
            f"üí∏ –û–±—â–∞—è —Å—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–∏: {int(additional_commission):,} —Ä—É–±.\n"
            f"üë• –í—Å–µ–≥–æ –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã: {int(total_salaries):,} —Ä—É–±.\n"
            f"üíµ –û–±–æ—Ä–æ—Ç: {int(total_paid):,} —Ä—É–±.\n"
            f"üë• –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {int(total_paid)-int(total_salaries):,} —Ä—É–±.\n"
            f"üßæ –û—Å—Ç–∞–ª–æ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å: {int(remaining_payment):,} —Ä—É–±."
        )

    await update.message.reply_text(response)
    return STATISTICS_MENU


