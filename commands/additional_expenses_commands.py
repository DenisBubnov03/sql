from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from commands.authorized_users import AUTHORIZED_USERS, NOT_ADMINS
from commands.start_commands import exit_to_main_menu
from data_base.db import session
from data_base.models import Payment

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
EXPENSE_TYPE = "EXPENSE_TYPE"
EXPENSE_AMOUNT = "EXPENSE_AMOUNT"
EXPENSE_DATE = "EXPENSE_DATE"



async def start_expense_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø —Ä–∞—Å—Ö–æ–¥–æ–≤.
    """
    user_id = update.message.from_user.id
    if user_id not in AUTHORIZED_USERS and user_id not in NOT_ADMINS:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return ConversationHandler.END

    await update.message.reply_text(
        "üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–ø —Ä–∞—Å—Ö–æ–¥–æ–≤:",
        reply_markup=ReplyKeyboardMarkup(
            [["–†–µ–∫–ª–∞–º–∞", "–ó–∞—Ä–ø–ª–∞—Ç–∞"], ["–ù–∞–∑–∞–¥"]],
            one_time_keyboard=True
        )
    )
    return EXPENSE_TYPE

async def handle_expense_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞—Å—Ö–æ–¥–∞.
    """
    expense_type = update.message.text.strip()
    
    if expense_type == "–ù–∞–∑–∞–¥":
        return await exit_to_main_menu(update, context)
    
    if expense_type not in ["–†–µ–∫–ª–∞–º–∞", "–ó–∞—Ä–ø–ª–∞—Ç–∞"]:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å—Ö–æ–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ '–†–µ–∫–ª–∞–º–∞' –∏–ª–∏ '–ó–∞—Ä–ø–ª–∞—Ç–∞':",
            reply_markup=ReplyKeyboardMarkup(
                [["–†–µ–∫–ª–∞–º–∞", "–ó–∞—Ä–ø–ª–∞—Ç–∞"], ["–ù–∞–∑–∞–¥"]],
                one_time_keyboard=True
            )
        )
        return EXPENSE_TYPE
    
    context.user_data["expense_type"] = expense_type
    await update.message.reply_text(
        f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞ '{expense_type}':",
        reply_markup=ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], one_time_keyboard=True)
    )
    return EXPENSE_AMOUNT

async def handle_expense_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–∞.
    """
    amount_text = update.message.text.strip()
    
    if amount_text == "–ù–∞–∑–∞–¥":
        return await exit_to_main_menu(update, context)
    
    try:
        amount = float(amount_text)
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        
        context.user_data["expense_amount"] = amount
        await update.message.reply_text(
            f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–∞—Å—Ö–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–°–µ–≥–æ–¥–Ω—è':",
            reply_markup=ReplyKeyboardMarkup(
                [["–°–µ–≥–æ–¥–Ω—è"], ["–ù–∞–∑–∞–¥"]],
                one_time_keyboard=True
            )
        )
        return EXPENSE_DATE
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:",
            reply_markup=ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], one_time_keyboard=True)
        )
        return EXPENSE_AMOUNT

async def handle_expense_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã —Ä–∞—Å—Ö–æ–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å—Ö–æ–¥ –≤ –±–∞–∑—É.
    """
    date_text = update.message.text.strip()
    
    if date_text == "–ù–∞–∑–∞–¥":
        return await exit_to_main_menu(update, context)
    
    try:
        if date_text.lower() == "—Å–µ–≥–æ–¥–Ω—è":
            expense_date = datetime.now().date()
        else:
            expense_date = datetime.strptime(date_text, "%d.%m.%Y").date()
        
        expense_type = context.user_data.get("expense_type")
        expense_amount = context.user_data.get("expense_amount")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ –≤ —Ç–∞–±–ª–∏—Ü–µ Payment
        # student_id = None –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å—Ç—É–¥–µ–Ω—Ç—É
        expense_payment = Payment(
            student_id=None,  # –ù–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å—Ç—É–¥–µ–Ω—Ç—É –¥–ª—è –¥–æ–ø —Ä–∞—Å—Ö–æ–¥–æ–≤
            mentor_id=None,  # –ù–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –º–µ–Ω—Ç–æ—Ä—É
            amount=expense_amount,
            payment_date=expense_date,
            comment=f"–î–æ–ø —Ä–∞—Å—Ö–æ–¥: {expense_type}",
            status="–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
        )
        
        try:
            session.add(expense_payment)
            session.commit()
            
            await update.message.reply_text(
                f"‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
                f"üí∞ –¢–∏–ø: {expense_type}\n"
                f"üí∏ –°—É–º–º–∞: {expense_amount} —Ä—É–±.\n"
                f"üìÖ –î–∞—Ç–∞: {expense_date.strftime('%d.%m.%Y')}"
            )
        except Exception as commit_error:
            session.rollback()
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞: {commit_error}")
            return await exit_to_main_menu(update, context)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop("expense_type", None)
        context.user_data.pop("expense_amount", None)
        
        return await exit_to_main_menu(update, context)
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–°–µ–≥–æ–¥–Ω—è':",
            reply_markup=ReplyKeyboardMarkup(
                [["–°–µ–≥–æ–¥–Ω—è"], ["–ù–∞–∑–∞–¥"]],
                one_time_keyboard=True
            )
        )
        return EXPENSE_DATE
    except Exception as e:
        # –î–µ–ª–∞–µ–º rollback –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        session.rollback()
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞: {e}")
        return await exit_to_main_menu(update, context)

def get_additional_expenses_for_period(start_date, end_date, session):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—É–º–º—É –¥–æ–ø —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥.
    """
    expenses = session.query(Payment).filter(
        Payment.payment_date >= start_date,
        Payment.payment_date <= end_date,
        Payment.status == "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
        Payment.comment.ilike("%–î–æ–ø —Ä–∞—Å—Ö–æ–¥%"),
        Payment.student_id.is_(None),  # –¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã –±–µ–∑ —Å—Ç—É–¥–µ–Ω—Ç–∞
        Payment.mentor_id.is_(None)  # –¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã –±–µ–∑ –º–µ–Ω—Ç–æ—Ä–∞
    ).all()
    
    return sum(float(expense.amount) for expense in expenses) 