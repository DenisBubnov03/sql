from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from commands.authorized_users import AUTHORIZED_USERS
from commands.start_commands import exit_to_main_menu
from commands.states import NOTIFICATION_MENU
from data_base.operations import get_all_students, get_students_with_no_calls, get_students_with_unpaid_payment


async def show_notifications_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    user_id = update.message.from_user.id
    if user_id not in AUTHORIZED_USERS:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return ConversationHandler.END

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        reply_markup=ReplyKeyboardMarkup(
            [["–ü–æ –∑–≤–æ–Ω–∫–∞–º", "–ü–æ –æ–ø–ª–∞—Ç–µ", "–í—Å–µ"], ["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
            one_time_keyboard=True
        )
    )
    return NOTIFICATION_MENU


async def check_call_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∑–≤–æ–Ω–∫–∞–º.
    """
    students = get_students_with_no_calls()

    if students:
        notifications = [
            f"–°—Ç—É–¥–µ–Ω—Ç {student.fio} {student.telegram} –¥–∞–≤–Ω–æ –Ω–µ –∑–≤–æ–Ω–∏–ª!" for student in students
        ]
        await update.message.reply_text("‚ùó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∑–≤–æ–Ω–∫–∞–º:\n" + "\n".join(notifications))
    else:
        await update.message.reply_text("‚úÖ –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –∑–≤–æ–Ω–∫–∞–º.")
    return await exit_to_main_menu(update, context)


async def check_payment_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ.
    """
    students = get_students_with_unpaid_payment()

    if students:
        notifications = [
            f"–°—Ç—É–¥–µ–Ω—Ç {student.fio} {student.telegram} –∑–∞–¥–æ–ª–∂–∞–ª {student.total_cost - student.payment_amount} —Ä—É–±–ª–µ–π."
            for student in students
        ]
        await update.message.reply_text("‚ùó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ:\n" + "\n".join(notifications))
    else:
        await update.message.reply_text("‚úÖ –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –æ–ø–ª–∞—Ç–µ.")
    return await exit_to_main_menu(update, context)


async def check_all_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    call_notifications = get_students_with_no_calls()
    payment_notifications = get_students_with_unpaid_payment()

    messages = []

    if payment_notifications:
        messages.append("‚ùó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –æ–ø–ª–∞—Ç–∞–º:")
        messages.extend([
            f"–°—Ç—É–¥–µ–Ω—Ç {student.fio} {student.telegram} –∑–∞–¥–æ–ª–∂–∞–ª {student.total_cost - student.payment_amount} —Ä—É–±–ª–µ–π."
            for student in payment_notifications
        ])

    if call_notifications:
        messages.append("‚ùó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∑–≤–æ–Ω–∫–∞–º:")
        messages.extend([
            f"–°—Ç—É–¥–µ–Ω—Ç {student.fio} {student.telegram} –¥–∞–≤–Ω–æ –Ω–µ –∑–≤–æ–Ω–∏–ª!" for student in call_notifications
        ])

    if not messages:
        await update.message.reply_text("‚úÖ –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç!")
    else:
        await update.message.reply_text("\n".join(messages))
    return await exit_to_main_menu(update, context)
