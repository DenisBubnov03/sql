from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from commands.authorized_users import AUTHORIZED_USERS
from commands.start_commands import exit_to_main_menu
from commands.states import NOTIFICATION_MENU, PAYMENT_NOTIFICATION_MENU
from data_base.operations import get_all_students, get_students_with_no_calls, get_students_with_unpaid_payment


async def show_notifications_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    user_id = update.message.from_user.id
    if user_id not in AUTHORIZED_USERS:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return ConversationHandler.END

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        reply_markup=ReplyKeyboardMarkup(
            [["–ü–æ –∑–≤–æ–Ω–∫–∞–º", "–ü–æ –æ–ø–ª–∞—Ç–µ", "–í—Å–µ"], ["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
            one_time_keyboard=True
        )
    )
    return NOTIFICATION_MENU


async def check_call_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∑–≤–æ–Ω–∫–∞–º.
    """
    students = get_students_with_no_calls()
    if students:
        notifications = [
            f"–°—Ç—É–¥–µ–Ω—Ç {student.fio} {student.telegram} –¥–∞–≤–Ω–æ –Ω–µ –∑–≤–æ–Ω–∏–ª!" for student in students
        ]
        await update.message.reply_text("‚ùó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∑–≤–æ–Ω–∫–∞–º:\n" + "\n".join(notifications))
    else:
        await update.message.reply_text("‚úÖ –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –∑–≤–æ–Ω–∫–∞–º.")
    return await exit_to_main_menu(update, context)


async def check_payment_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –æ–ø–ª–∞—Ç–µ.
    """
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –æ–ø–ª–∞—Ç–µ:",
        reply_markup=ReplyKeyboardMarkup(
            [["–ü–æ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–µ", "–ü–æ –ø–æ—Å—Ç–æ–ø–ª–∞—Ç–µ"], ["üîô –ù–∞–∑–∞–¥"]],
            one_time_keyboard=True
        )
    )
    return PAYMENT_NOTIFICATION_MENU


async def check_prepayment_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–µ (–¥–æ–ª–∂–Ω–∏–∫–∏).
    """
    students = get_students_with_unpaid_payment()

    if students:
        notifications = [
            f"–°—Ç—É–¥–µ–Ω—Ç {student.fio} {student.telegram} –∑–∞–¥–æ–ª–∂–∞–ª {student.total_cost - student.payment_amount} —Ä—É–±–ª–µ–π."
            for student in students
        ]
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
        full_message = "‚ùó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–µ:\n" + "\n".join(notifications)
        
        if len(full_message) > 4000:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = []
            current_part = "‚ùó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–µ:\n"
            
            for notification in notifications:
                if len(current_part + notification + "\n") > 4000:
                    parts.append(current_part.strip())
                    current_part = notification + "\n"
                else:
                    current_part += notification + "\n"
            
            if current_part.strip():
                parts.append(current_part.strip())
            
            for part in parts:
                await update.message.reply_text(part)
        else:
            await update.message.reply_text(full_message)
    else:
        await update.message.reply_text("‚úÖ –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–µ.")
    return await exit_to_main_menu(update, context)


async def check_postpayment_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–æ—Å—Ç–æ–ø–ª–∞—Ç–µ (–∫–æ–º–∏—Å—Å–∏–∏).
    """
    from data_base.db import session
    from data_base.models import Student, Payment
    from datetime import date, timedelta
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–£—Å—Ç—Ä–æ–∏–ª—Å—è"
    employed_students = session.query(Student).filter(
        Student.training_status == "–£—Å—Ç—Ä–æ–∏–ª—Å—è"
    ).all()
    
    issues = []
    current_date = date.today()
    one_month_ago = current_date - timedelta(days=30)
    
    for student in employed_students:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é –∏ –≤—ã–ø–ª–∞—á–µ–Ω–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é
            if not student.commission:
                continue
                
            commission_info = student.commission.split(", ")
            payments = int(commission_info[0]) if len(commission_info) > 0 and commission_info[0].isdigit() else 0
            percentage = int(commission_info[1].replace("%", "")) if len(commission_info) > 1 else 0
            salary = student.salary or 0
            total_commission = (salary * percentage / 100) * payments
            paid_commission = student.commission_paid or 0
            
            if total_commission == 0 or paid_commission >= total_commission:
                continue
                
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∫–æ–º–∏—Å—Å–∏–∏
            last_commission = session.query(Payment).filter(
                Payment.student_id == student.id,
                Payment.comment.ilike("%–∫–æ–º–∏—Å—Å–∏%"),
                Payment.status == "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
            ).order_by(Payment.payment_date.desc()).first()
            
            last_commission_date = last_commission.payment_date if last_commission else None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
            issue_reasons = []
            
            if paid_commission < total_commission:
                issue_reasons.append(f"–ù–µ–ø–æ–ª–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞: {paid_commission}/{total_commission} —Ä—É–±.")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º employment_date –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            employment_date = None
            if student.employment_date:
                try:
                    if isinstance(student.employment_date, str):
                        from datetime import datetime
                        employment_date = datetime.strptime(student.employment_date, "%d.%m.%Y").date()
                    else:
                        employment_date = student.employment_date
                except:
                    employment_date = None
            
            if (not last_commission_date and employment_date and 
                employment_date < one_month_ago):
                issue_reasons.append("–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –∫–æ–º–∏—Å—Å–∏–∏ + —É—Å—Ç—Ä–æ–∏–ª—Å—è > –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥")
            
            if (last_commission_date and last_commission_date < one_month_ago and 
                paid_commission < total_commission):
                issue_reasons.append("–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂ –∫–æ–º–∏—Å—Å–∏–∏ > –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥")
            
            if issue_reasons:
                issues.append({
                    'student_id': student.id,
                    'student_name': student.fio,
                    'student_telegram': student.telegram,
                    'total_commission': total_commission,
                    'paid_commission': paid_commission,
                    'employment_date': student.employment_date,
                    'last_commission_date': last_commission_date,
                    'reasons': issue_reasons
                })
                
        except Exception as e:
            continue
    
    if issues:
        notifications = []
        for issue in issues:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
            if issue['last_commission_date']:
                last_payment = f" (–ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂: {issue['last_commission_date']})"
            elif issue['paid_commission'] and issue['paid_commission'] > 0:
                last_payment = " (–µ—Å—Ç—å –≤—ã–ø–ª–∞—Ç—ã, –Ω–æ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –∫–æ–º–∏—Å—Å–∏–∏)"
            else:
                last_payment = " (–Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π)"
            
            notifications.append(
                f"–°—Ç—É–¥–µ–Ω—Ç {issue['student_name']} {issue['student_telegram']}{last_payment}:\n" +
                "\n".join([f"  ‚Ä¢ {reason}" for reason in issue['reasons']])
            )
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
        full_message = "‚ùó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–æ—Å—Ç–æ–ø–ª–∞—Ç–µ:\n\n" + "\n\n".join(notifications)
        
        if len(full_message) > 4000:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = []
            current_part = "‚ùó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–æ—Å—Ç–æ–ø–ª–∞—Ç–µ:\n\n"
            
            for notification in notifications:
                if len(current_part + notification + "\n\n") > 4000:
                    parts.append(current_part.strip())
                    current_part = notification + "\n\n"
                else:
                    current_part += notification + "\n\n"
            
            if current_part.strip():
                parts.append(current_part.strip())
            
            for part in parts:
                await update.message.reply_text(part)
        else:
            await update.message.reply_text(full_message)
    else:
        await update.message.reply_text("‚úÖ –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –ø–æ—Å—Ç–æ–ø–ª–∞—Ç–µ.")
    return await exit_to_main_menu(update, context)


async def check_all_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    call_notifications = get_students_with_no_calls()
    payment_notifications = get_students_with_unpaid_payment()

    messages = []

    if payment_notifications:
        messages.append("‚ùó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –æ–ø–ª–∞—Ç–∞–º:")
        messages.extend([
            f"–°—Ç—É–¥–µ–Ω—Ç {student.fio} {student.telegram} –∑–∞–¥–æ–ª–∂–∞–ª {student.total_cost - student.payment_amount} —Ä—É–±–ª–µ–π."
            for student in payment_notifications
        ])

    if call_notifications:
        messages.append("‚ùó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∑–≤–æ–Ω–∫–∞–º:")
        messages.extend([
            f"–°—Ç—É–¥–µ–Ω—Ç {student.fio} {student.telegram} –¥–∞–≤–Ω–æ –Ω–µ –∑–≤–æ–Ω–∏–ª!" for student in call_notifications
        ])

    if not messages:
        await update.message.reply_text("‚úÖ –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç!")
    else:
        full_message = "\n".join(messages)
        
        if len(full_message) > 4000:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = []
            current_part = ""
            
            for message in messages:
                if len(current_part + message + "\n") > 4000:
                    if current_part:
                        parts.append(current_part.strip())
                    current_part = message + "\n"
                else:
                    current_part += message + "\n"
            
            if current_part.strip():
                parts.append(current_part.strip())
            
            for part in parts:
                await update.message.reply_text(part)
        else:
            await update.message.reply_text(full_message)
    return await exit_to_main_menu(update, context)
