from datetime import datetime
import logging
from sqlalchemy import func
from sqlalchemy import select
from commands.authorized_users import AUTHORIZED_USERS
from commands.logger import custom_logger
from commands.start_commands import exit_to_main_menu
from commands.states import FIO, TELEGRAM, START_DATE, COURSE_TYPE, TOTAL_PAYMENT, PAID_AMOUNT, \
    SELECT_MENTOR, MAIN_MENU

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from data_base.db import session
from data_base.models import Payment, Mentor, Student, CareerConsultant, FullstackTopicAssign
from data_base.operations import  get_student_by_fio_or_telegram
from student_management.student_management import add_student
from commands.fullstack_salary_calculator import calculate_fullstack_salary
logging.getLogger('sqlalchemy').setLevel(logging.ERROR)

def debug_fullstack_data():
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ—É–ª–ª—Å—Ç–µ–∫–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–ª–ª—Å—Ç–µ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        fullstack_students = session.query(Student).filter(Student.training_type == "–§—É–ª–ª—Å—Ç–µ–∫").all()
        logger.info(f"üîç DEBUG: –í—Å–µ–≥–æ —Ñ—É–ª–ª—Å—Ç–µ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(fullstack_students)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –ø—Ä–∏–Ω—è—Ç—ã—Ö —Ç–µ–º
        all_topics = session.query(FullstackTopicAssign).all()
        logger.info(f"üîç DEBUG: –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏–Ω—è—Ç—ã—Ö —Ç–µ–º: {len(all_topics)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—á–Ω—ã–µ —Ç–µ–º—ã
        manual_topics = session.query(FullstackTopicAssign).filter(
            FullstackTopicAssign.topic_manual.isnot(None)
        ).all()
        logger.info(f"üîç DEBUG: –í—Å–µ–≥–æ —Ä—É—á–Ω—ã—Ö —Ç–µ–º: {len(manual_topics)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ —Ç–µ–º—ã
        auto_topics = session.query(FullstackTopicAssign).filter(
            FullstackTopicAssign.topic_auto.isnot(None)
        ).all()
        logger.info(f"üîç DEBUG: –í—Å–µ–≥–æ –∞–≤—Ç–æ —Ç–µ–º: {len(auto_topics)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        if manual_topics:
            logger.info("üîç DEBUG: –ü—Ä–∏–º–µ—Ä—ã —Ä—É—á–Ω—ã—Ö —Ç–µ–º:")
            for topic in manual_topics[:5]:  # –ü–µ—Ä–≤—ã–µ 5
                logger.info(f"  ‚Ä¢ –°—Ç—É–¥–µ–Ω—Ç {topic.student_id}, –ú–µ–Ω—Ç–æ—Ä {topic.mentor_id}: {topic.topic_manual}")
        
        if auto_topics:
            logger.info("üîç DEBUG: –ü—Ä–∏–º–µ—Ä—ã –∞–≤—Ç–æ —Ç–µ–º:")
            for topic in auto_topics[:5]:  # –ü–µ—Ä–≤—ã–µ 5
                logger.info(f"  ‚Ä¢ –°—Ç—É–¥–µ–Ω—Ç {topic.student_id}, –ú–µ–Ω—Ç–æ—Ä {topic.mentor_id}: {topic.topic_auto}")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ñ—É–ª–ª—Å—Ç–µ–∫–æ–≤: {e}")

logger = logging.getLogger(__name__)

def split_long_message(text, max_length=4000):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ max_length —Å–∏–º–≤–æ–ª–æ–≤.
    """
    if len(text) <= max_length:
        return [text]
    
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤), —Ä–∞–∑–±–∏–≤–∞—é –Ω–∞ —á–∞—Å—Ç–∏...")
    
    parts = []
    current_part = ""
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    lines = text.split('\n')
    
    for line in lines:
        # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç
        if len(current_part) + len(line) + 1 > max_length:
            if current_part:
                parts.append(current_part.strip())
                current_part = line + '\n'
            else:
                # –ï—Å–ª–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ—ë
                if len(line) > max_length:
                    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
                    words = line.split(' ')
                    temp_line = ""
                    for word in words:
                        if len(temp_line) + len(word) + 1 > max_length:
                            if temp_line:
                                parts.append(temp_line.strip())
                                temp_line = word + ' '
                            else:
                                # –ï—Å–ª–∏ –æ–¥–Ω–æ —Å–ª–æ–≤–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º
                                parts.append(word[:max_length])
                                temp_line = word[max_length:] + ' '
                        else:
                            temp_line += word + ' '
                    if temp_line.strip():
                        current_part = temp_line
                else:
                    current_part = line + '\n'
        else:
            current_part += line + '\n'
    
    if current_part.strip():
        parts.append(current_part.strip())
    
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–±–∏—Ç–æ –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π")
    return parts

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞: —à–∞–≥ 1 - –≤–≤–æ–¥ –§–ò–û
async def add_student_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°—Ç–∞—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: –∑–∞–ø—Ä–æ—Å –§–ò–û.
    """
    # –û—á–∏—â–∞–µ–º id –º–µ–Ω—Ç–æ—Ä–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
    context.user_data.pop('mentor_id', None)
    context.user_data.pop('auto_mentor_id', None)
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞:",
        reply_markup=ReplyKeyboardMarkup(
            [["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
            one_time_keyboard=True
        )
    )
    return FIO


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞: —à–∞–≥ 2 - –≤–≤–æ–¥ Telegram
async def add_student_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—Ä–æ—Å Telegram —Å—Ç—É–¥–µ–Ω—Ç–∞.
    """
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    if update.message.text.strip() == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            return await exit_to_main_menu(update, context)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –§–ò–û
    context.user_data["fio"] = update.message.text.strip()
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ Telegram —Å—Ç—É–¥–µ–Ω—Ç–∞:",
        reply_markup=ReplyKeyboardMarkup(
            [["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
            one_time_keyboard=True
        )
    )
    return TELEGRAM


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ Telegram
def is_telegram_unique(telegram):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å Telegram –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    student = get_student_by_fio_or_telegram(telegram)
    return student is None


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞: —à–∞–≥ 3 - –≤–≤–æ–¥ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è
async def add_student_telegram(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è.
    """
    telegram_account = update.message.text.strip()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    if telegram_account == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await exit_to_main_menu(update, context)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ Telegram
    if not telegram_account.startswith("@") or len(telegram_account) <= 1:
        await update.message.reply_text(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=ReplyKeyboardMarkup(
                [["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
                one_time_keyboard=True
            )
        )
        return TELEGRAM

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å Telegram
    if not is_telegram_unique(telegram_account):
        await update.message.reply_text(
            f"–°—Ç—É–¥–µ–Ω—Ç —Å —Ç–∞–∫–∏–º Telegram ({telegram_account}) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π Telegram.",
            reply_markup=ReplyKeyboardMarkup(
                [["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
                one_time_keyboard=True
            )
        )
        return TELEGRAM

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram –≤ context
    context.user_data["telegram"] = telegram_account

    # –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–°–µ–≥–æ–¥–Ω—è':",
        reply_markup=ReplyKeyboardMarkup(
            [["–°–µ–≥–æ–¥–Ω—è"], ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
            one_time_keyboard=True
        )
    )
    return START_DATE



# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞: —à–∞–≥ 4 - –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è
async def add_student_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è.
    """
    try:
        date_text = update.message.text.strip()

        if date_text == "–°–µ–≥–æ–¥–Ω—è":
            date_text = datetime.now().strftime("%d.%m.%Y")

        datetime.strptime(date_text, "%d.%m.%Y")
        context.user_data["start_date"] = date_text

        await update.message.reply_text(
            f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {date_text}.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è:",
            reply_markup=ReplyKeyboardMarkup(
                [['–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–§—É–ª–ª—Å—Ç–µ–∫']],
                one_time_keyboard=True
            )
        )
        return COURSE_TYPE
    except ValueError:
        await update.message.reply_text(
            "–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–°–µ–≥–æ–¥–Ω—è'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )
        return START_DATE
async def handle_mentor_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected = update.message.text.strip()
    mentors_dict = context.user_data.get("mentors_list", {})
    mentor_id = mentors_dict.get(selected)

    if not mentor_id:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–µ–Ω—Ç–æ—Ä–æ–≤.")
        return "WAIT_FOR_MENTOR_CHOICE"

    context.user_data["mentor_id"] = mentor_id
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è:")
    return TOTAL_PAYMENT



# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞: —à–∞–≥ 5 - –≤—ã–±–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è
async def add_student_course_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—Å–µ–≥–¥–∞ –∏–¥—ë—Ç —à–∞–≥ –≤—ã–±–æ—Ä–∞ –º–µ–Ω—Ç–æ—Ä–∞.
    """
    valid_course_types = ["–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–§—É–ª–ª—Å—Ç–µ–∫"]
    course_type = update.message.text.strip()

    if course_type not in valid_course_types:
        await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ: {', '.join(valid_course_types)}.")
        return COURSE_TYPE

    context.user_data["course_type"] = course_type
    return await select_mentor_by_direction(update, context)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞: —à–∞–≥ 6 - –≤–≤–æ–¥ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
async def add_student_total_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—Ä–æ—Å –≤–Ω–µ—Å—ë–Ω–Ω–æ–π –æ–ø–ª–∞—Ç—ã.
    """
    try:
        total_payment = int(update.message.text)
        if total_payment > 0:
            context.user_data["total_payment"] = total_payment
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —É–∂–µ –≤–Ω–µ—Å—ë–Ω–Ω–æ–π –æ–ø–ª–∞—Ç—ã:")
            return PAID_AMOUNT

        await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return TOTAL_PAYMENT
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return TOTAL_PAYMENT






async def add_student_paid_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ –≤–Ω–µ—Å—ë–Ω–Ω–æ–π –æ–ø–ª–∞—Ç–µ.
    """
    try:
        paid_amount = int(update.message.text)
        total_payment = context.user_data["total_payment"]

        if 0 <= paid_amount <= total_payment:
            context.user_data["paid_amount"] = paid_amount
            # –•–∞—Ä–¥–∫–æ–¥–∏–º –∫–æ–º–∏—Å—Å–∏—é "2, 50%"
            context.user_data["commission"] = "2, 50%"
            
            # –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
            mentor_id = context.user_data.get("mentor_id", 1)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
            from datetime import datetime
            start_date_str = context.user_data["start_date"]
            if isinstance(start_date_str, str):
                try:
                    start_date = datetime.strptime(start_date_str, "%d.%m.%Y").date()
                except Exception:
                    start_date = None
            else:
                start_date = start_date_str
                
            student_id = add_student(
                fio=context.user_data["fio"],
                telegram=context.user_data["telegram"],
                start_date=start_date,
                training_type=context.user_data["course_type"],
                total_cost=context.user_data["total_payment"],
                payment_amount=context.user_data.get("paid_amount", 0),
                fully_paid="–î–∞" if context.user_data.get("paid_amount", 0) == context.user_data["total_payment"] else "–ù–µ—Ç",
                commission=context.user_data["commission"],
                mentor_id=context.user_data.get("mentor_id"),
                auto_mentor_id=context.user_data.get("auto_mentor_id")
            )

            if not student_id:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.")
                return ConversationHandler.END

            context.user_data["id"] = student_id

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–ª–∞—Ç—ë–∂
            course_type = context.user_data.get("course_type")
            mentor_id = context.user_data.get("mentor_id")
            auto_mentor_id = context.user_data.get("auto_mentor_id")
            if course_type == "–§—É–ª–ª—Å—Ç–µ–∫":
                payment_mentor_id = auto_mentor_id
            else:
                payment_mentor_id = mentor_id if mentor_id else auto_mentor_id
            if payment_mentor_id is not None:
                record_initial_payment(student_id, context.user_data.get("paid_amount", 0), payment_mentor_id)

            # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –º–µ–Ω—Ç–æ—Ä–æ–≤
            from data_base.db import session
            from data_base.models import Mentor

            mentor_id = context.user_data.get("mentor_id")
            auto_mentor_id = context.user_data.get("auto_mentor_id")
            mentor_name = None
            auto_mentor_name = None
            if mentor_id:
                mentor = session.query(Mentor).filter(Mentor.id == mentor_id).first()
                mentor_name = mentor.full_name if mentor else f"ID {mentor_id}"
            if auto_mentor_id:
                auto_mentor = session.query(Mentor).filter(Mentor.id == auto_mentor_id).first()
                auto_mentor_name = auto_mentor.full_name if auto_mentor else f"ID {auto_mentor_id}"

            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç {context.user_data['fio']} –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            if mentor_name and auto_mentor_name:
                msg += f"–†—É—á–Ω–æ–π –º–µ–Ω—Ç–æ—Ä: {mentor_name}\n–ê–≤—Ç–æ-–º–µ–Ω—Ç–æ—Ä: {auto_mentor_name}"
            elif mentor_name:
                msg += f"–†—É—á–Ω–æ–π –º–µ–Ω—Ç–æ—Ä: {mentor_name}"
            elif auto_mentor_name:
                msg += f"–ê–≤—Ç–æ-–º–µ–Ω—Ç–æ—Ä: {auto_mentor_name}"
            else:
                msg += "–ú–µ–Ω—Ç–æ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω."

            await update.message.reply_text(msg)
            await exit_to_main_menu(update, context)
            return ConversationHandler.END
        else:
            await update.message.reply_text(
                f"–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 0 –¥–æ {total_payment}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
            )
            return PAID_AMOUNT
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return PAID_AMOUNT

def record_initial_payment(student_id, paid_amount, mentor_id):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂ –≤ `payments`.
    """
    try:
        if mentor_id is None:
            print(f"‚ùå DEBUG: –ü–ª–∞—Ç—ë–∂ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω ‚Äî –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω mentor_id –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_id}")
            return
        if paid_amount > 0:
            new_payment = Payment(
                student_id=student_id,
                mentor_id=mentor_id,
                amount=paid_amount,
                payment_date=datetime.now().date(),
                comment="–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                status="–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
            )

            session.add(new_payment)
            session.commit()
            print(f"‚úÖ DEBUG: –ü–ª–∞—Ç—ë–∂ –∑–∞–ø–∏—Å–∞–Ω –≤ payments! {paid_amount} —Ä—É–±.")

    except Exception as e:
        session.rollback()
        print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")

async def request_salary_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å—á—ë—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã (–æ—Ç –∏ –¥–æ).
    """
    await update.message.reply_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å—á—ë—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ü—Ä–∏–º–µ—Ä: `01.03.2025 - 31.03.2025`"
    )
    return "WAIT_FOR_SALARY_DATES"


async def calculate_salary(update: Update, context):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—É –º–µ–Ω—Ç–æ—Ä–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
    """
    try:
        date_range = update.message.text.strip()

        if " - " not in date_range:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "–ü—Ä–∏–º–µ—Ä: 01.03.2025 - 31.03.2025"
            )
            return "WAIT_FOR_SALARY_DATES"

        start_date_str, end_date_str = map(str.strip, date_range.split("-"))
        
        try:
            start_date = datetime.strptime(start_date_str, "%d.%m.%Y").date()
            end_date = datetime.strptime(end_date_str, "%d.%m.%Y").date()
        except ValueError as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã: {e}\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "–ü—Ä–∏–º–µ—Ä: 01.03.2025 - 31.03.2025"
            )
            return "WAIT_FOR_SALARY_DATES"

        if start_date > end_date:
            await update.message.reply_text(
                "‚ùå –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return "WAIT_FOR_SALARY_DATES"

        logger.info(f"üìä –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ—Ö –º–µ–Ω—Ç–æ—Ä–æ–≤...")
        all_mentors = {mentor.id: mentor for mentor in session.query(Mentor).all()}

        if not all_mentors:
            logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: mentors –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å –ë–î –∏–ª–∏ session.commit()")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ–Ω—Ç–æ—Ä–æ–≤.")
            return ConversationHandler.END

        mentor_salaries = {mentor.id: 0 for mentor in all_mentors.values()}

        # –í—ã–±–∏—Ä–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
        logger.info(f"üìä –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ payments...")
        payments = session.query(
            Payment.mentor_id, func.sum(Payment.amount)
        ).filter(
            Payment.payment_date >= start_date,
            Payment.payment_date <= end_date
        ).group_by(Payment.mentor_id).all()

        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: {len(payments)}")

        if not payments:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥!")
            payments = []
        # –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ–Ω—Ç–æ—Ä–∞
        detailed_logs = {}

        detailed_payments = session.query(Payment).filter(
            Payment.payment_date >= start_date,
            Payment.payment_date <= end_date,
            Payment.status == "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
            ~Payment.comment.ilike("%–ø—Ä–µ–º–∏%")  # –∏—Å–∫–ª—é—á–∞–µ–º –ø—Ä–µ–º–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞
        ).all()

        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {len(detailed_payments)}")

        for payment in detailed_payments:
            mentor_id = payment.mentor_id
            student = session.query(Student).filter(Student.id == payment.student_id).first()
            if not student:
                continue

            if student.training_type == "–§—É–ª–ª—Å—Ç–µ–∫":
                continue  # Fullstack –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ: —Ñ–∏–∫—Å 5000 –º–µ–Ω—Ç–æ—Ä—É 1, 30% –º–µ–Ω—Ç–æ—Ä—É 3

            if mentor_id == 1 and student.training_type == "–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
                percent = 0.3
            elif mentor_id == 3 and student.training_type == "–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
                percent = 0.3
            else:
                percent = 0.2

            payout = float(payment.amount) * percent
            if mentor_id not in mentor_salaries:
                mentor_salaries[mentor_id] = 0
            mentor_salaries[mentor_id] += payout

            line = f"{student.fio} (ID {student.id}) {student.training_type}, {payment.payment_date}, {payment.amount} {payment.comment} —Ä—É–±., {int(percent*100)}%, {round(payout, 2)} —Ä—É–±."

            if mentor_id not in detailed_logs:
                detailed_logs[mentor_id] = []
            detailed_logs[mentor_id].append(line)

        # üîÅ –ë–æ–Ω—É—Å—ã 10% –∑–∞ —á—É–∂–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–∫—Ä–æ–º–µ Fullstack)
        for payment in detailed_payments:
            student = session.query(Student).filter(Student.id == payment.student_id).first()
            if not student:
                continue

            if student.training_type == "–§—É–ª–ª—Å—Ç–µ–∫":
                continue  # ‚ùå –ë–æ–Ω—É—Å –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∑–∞ Fullstack

            if 1 not in detailed_logs:
                detailed_logs[1] = []
            if 3 not in detailed_logs:
                detailed_logs[3] = []

            # üîπ –ú–µ–Ω—Ç–æ—Ä 1 –ø–æ–ª—É—á–∞–µ—Ç 10% –∑–∞ –≤—Å–µ—Ö —á—É–∂–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ —Ä—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
            if payment.mentor_id != 1 and student.training_type.lower().strip() == "—Ä—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
                bonus = float(payment.amount) * 0.1
                if 1 not in mentor_salaries:
                    mentor_salaries[1] = 0
                mentor_salaries[1] += bonus
                detailed_logs[1].append(
                    f"üîÅ 10% –±–æ–Ω—É—Å –º–µ–Ω—Ç–æ—Ä—É 1 –∑–∞ —á—É–∂–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ {student.fio} ({student.training_type}) | "
                    f"{payment.payment_date}, {payment.amount} —Ä—É–±. | +{round(bonus, 2)} —Ä—É–±."
                )

            # üîπ –ú–µ–Ω—Ç–æ—Ä 3 –ø–æ–ª—É—á–∞–µ—Ç 10% —Ç–æ–ª—å–∫–æ –∑–∞ —á—É–∂–∏—Ö –∞–≤—Ç–æ—Ç–µ—Å—Ç-—Å—Ç—É–¥–µ–Ω—Ç–æ–≤
            if (
                    student.training_type == "–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
                    and payment.mentor_id != 3
            ):
                bonus = float(payment.amount) * 0.1
                if 3 not in mentor_salaries:
                    mentor_salaries[3] = 0
                mentor_salaries[3] += bonus
                detailed_logs[3].append(
                    f"üîÅ 10% –±–æ–Ω—É—Å –º–µ–Ω—Ç–æ—Ä—É 3 –∑–∞ —á—É–∂–æ–≥–æ –∞–≤—Ç–æ—Ç–µ—Å—Ç —É—á–µ–Ω–∏–∫–∞ {student.fio} | "
                    f"{payment.payment_date}, {payment.amount} —Ä—É–±. | +{round(bonus, 2)} —Ä—É–±."
                )

        # üíª –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –†–ê–°–ß–ï–¢–ê –ó–ü –î–ò–†–ï–ö–¢–û–†–û–í –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê –§–£–õ–õ–°–¢–ï–ö
        logger.info("üíª –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Ä–∞—Å—á–µ—Ç–∞ –ó–ü –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞ —Ñ—É–ª–ª—Å—Ç–µ–∫")
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        debug_fullstack_data()
        
        fullstack_salary_result = calculate_fullstack_salary(start_date, end_date)
        
        # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –ó–ü –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –æ–±—â–∏–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
        for director_id, salary in fullstack_salary_result['salaries'].items():
            if salary > 0:
                if director_id not in mentor_salaries:
                    mentor_salaries[director_id] = 0
                mentor_salaries[director_id] += salary
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏ —Ñ—É–ª–ª—Å—Ç–µ–∫–æ–≤ –≤ –æ–±—â–∏–µ –ª–æ–≥–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
                if director_id not in detailed_logs:
                    detailed_logs[director_id] = []
                detailed_logs[director_id].extend(fullstack_salary_result['logs'][director_id])
        
        logger.info(f"üíª –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ñ—É–ª–ª—Å—Ç–µ–∫–æ–≤: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {fullstack_salary_result['students_processed']} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")

        # üéÅ –£—á–µ—Ç –ø—Ä–µ–º–∏–π (–≤—ã–ø–ª–∞—Ç—ã —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º "–ü—Ä–µ–º–∏—è")
        premium_payments = session.query(Payment).filter(
            Payment.payment_date >= start_date,
            Payment.payment_date <= end_date,
            Payment.status == "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
            Payment.comment.ilike("%–ø—Ä–µ–º–∏%")  # –ª–æ–≤–∏–º "–ü—Ä–µ–º–∏—è", "–ø—Ä–µ–º–∏—è", "–ü–†–ï–ú–ò–Ø" –∏ —Ç.–¥.
        ).all()

        for payment in premium_payments:
            bonus_amount = float(payment.amount)
            mentor_id = payment.mentor_id
            if mentor_id not in mentor_salaries:
                mentor_salaries[mentor_id] = 0
            mentor_salaries[mentor_id] += bonus_amount

            detailed_logs.setdefault(mentor_id, []).append(
                f"üéÅ –ü—Ä–µ–º–∏—è {payment.amount} —Ä—É–±. | {payment.payment_date} | +{bonus_amount} —Ä—É–±."
            )

        # üíº –†–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤
        career_consultant_salaries = {}
        all_consultants = session.query(CareerConsultant).filter(CareerConsultant.is_active == True).all()
        
        for consultant in all_consultants:
            salary = 0
            total_commission = 0
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º
            students = session.query(Student).filter(Student.career_consultant_id == consultant.id).all()
            student_ids = [student.id for student in students]
            
            if not student_ids:
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º "–ö–æ–º–∏—Å—Å–∏—è" –∑–∞ –ø–µ—Ä–∏–æ–¥
            all_student_payments = session.query(Payment).filter(
                Payment.student_id.in_(student_ids),
                Payment.payment_date >= start_date,
                Payment.payment_date <= end_date,
                Payment.status == "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
            ).all()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–º–∏—Å—Å–∏–∏
            commission_payments = [p for p in all_student_payments if "–∫–æ–º–∏—Å—Å–∏" in p.comment.lower()]
            
            # 10% –æ—Ç —Å—É–º–º—ã –∫–æ–º–∏—Å—Å–∏–π
            total_commission = sum(float(p.amount) for p in commission_payments)
            salary = total_commission * 0.1
            career_consultant_salaries[consultant.id] = round(salary, 2)
            
            # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∫–æ–º–∏—Å—Å–∏–∏
            if commission_payments:
                detailed_logs.setdefault(f"cc_{consultant.id}", []).append(
                    f"üíº –ö–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç {consultant.full_name} | "
                    f"–ö–æ–º–∏—Å—Å–∏–∏: {total_commission} —Ä—É–±. | 10% = {salary} —Ä—É–±."
                )
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–ª–∞—Ç–µ–∂ –∫–æ–º–∏—Å—Å–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
                for payment in commission_payments:
                    student = session.query(Student).filter(Student.id == payment.student_id).first()
                    if student:
                        detailed_logs[f"cc_{consultant.id}"].append(
                            f"  üìÑ –°—Ç—É–¥–µ–Ω—Ç {student.fio} ({student.telegram}) | "
                            f"–ü–ª–∞—Ç–µ–∂: {payment.amount} —Ä—É–±. | "
                            f"–î–∞—Ç–∞: {payment.payment_date} | "
                            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {payment.comment}"
                        )
            elif salary > 0:
                detailed_logs.setdefault(f"cc_{consultant.id}", []).append(
                    f"üíº –ö–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç {consultant.full_name} | "
                    f"–ö–æ–º–∏—Å—Å–∏–∏: {total_commission} —Ä—É–±. | 10% = {salary} —Ä—É–±."
                )

        # –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
        for mentor_id, logs in detailed_logs.items():
            if isinstance(mentor_id, str) and mentor_id.startswith("cc_"):
                # –õ–æ–≥–∏ –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤
                consultant_id = int(mentor_id.split("_")[1])
                consultant = next((c for c in all_consultants if c.id == consultant_id), None)
                if consultant:
                    logger.info(f"\nüìò –ö–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç: {consultant.full_name} ({consultant.telegram})")
                    for log in logs:
                        logger.info(f"‚Äî {log}")
                    salary = career_consultant_salaries.get(consultant_id, 0)
                    salary_with_tax = round(salary * 1.06, 2)
                    logger.info(f"–ò—Ç–æ–≥: {salary} —Ä—É–±. (—Å –ù–î–§–õ {salary_with_tax})")
            else:
                # –õ–æ–≥–∏ –¥–ª—è –º–µ–Ω—Ç–æ—Ä–æ–≤
                mentor = all_mentors.get(mentor_id)
                if mentor:
                    logger.info(f"\nüìò –ú–µ–Ω—Ç–æ—Ä: {mentor.full_name} ({mentor.telegram})")
                    for log in logs:
                        logger.info(f"‚Äî {log}")
                    salary = round(mentor_salaries[mentor_id], 2)
                    salary_with_tax = round(salary * 1.06, 2)
                    logger.info(f"–ò—Ç–æ–≥: {salary} —Ä—É–±. (—Å –ù–î–§–õ {salary_with_tax})")
                else:
                    logger.info(f"\nüìò –ú–µ–Ω—Ç–æ—Ä ID {mentor_id}:")
                    for log in logs:
                        logger.info(f"‚Äî {log}")
                    salary = round(mentor_salaries.get(mentor_id, 0), 2)
                    salary_with_tax = round(salary * 1.06, 2)
                    logger.info(f"–ò—Ç–æ–≥: {salary} —Ä—É–±. (—Å –ù–î–§–õ {salary_with_tax})")

        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±—é–¥–∂–µ—Ç –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã (–≤–∫–ª—é—á–∞—è –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤)
        total_mentor_salaries = sum(mentor_salaries.values())
        total_career_consultant_salaries = sum(career_consultant_salaries.values())
        total_salaries = total_mentor_salaries + total_career_consultant_salaries
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        context.user_data['total_salaries'] = total_salaries
        context.user_data['total_mentor_salaries'] = total_mentor_salaries
        context.user_data['total_career_consultant_salaries'] = total_career_consultant_salaries
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        salary_report = f"üìä –†–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç –∑–∞ {start_date_str} - {end_date_str}\n\n"
        
        # –û—Ç—á–µ—Ç –ø–æ –º–µ–Ω—Ç–æ—Ä–∞–º
        salary_report += "üë®‚Äçüè´ –ó–∞—Ä–ø–ª–∞—Ç–∞ –º–µ–Ω—Ç–æ—Ä–æ–≤:\n"
        for mentor in all_mentors.values():
            salary = round(mentor_salaries.get(mentor.id, 0), 2)
            if salary > 0:
                # –†–∞—Å—á–µ—Ç —Å —É—á–µ—Ç–æ–º –ù–î–§–õ 6%
                salary_with_tax = round(salary * 1.06, 2)
                salary_report += f"üí∞ {mentor.full_name} ({mentor.telegram}): {salary} —Ä—É–±. (—Å –ù–î–§–õ {salary_with_tax})\n"
            else:
                salary_report += f"‚ùå {mentor.full_name} ({mentor.telegram}): –£ –º–µ–Ω—Ç–æ—Ä–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥\n"
        
        # –ò—Ç–æ–≥–æ –º–µ–Ω—Ç–æ—Ä–æ–≤ —Å –ù–î–§–õ
        total_mentor_salaries_with_tax = round(total_mentor_salaries * 1.06, 2)
        salary_report += f"üìà –ò—Ç–æ–≥–æ –º–µ–Ω—Ç–æ—Ä–æ–≤: {int(total_mentor_salaries):,} —Ä—É–±. (—Å –ù–î–§–õ {int(total_mentor_salaries_with_tax):,})\n\n"
        
        # –û—Ç—á–µ—Ç –ø–æ –∫–∞—Ä—å–µ—Ä–Ω—ã–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞–º
        if career_consultant_salaries:
            salary_report += "üíº –ó–∞—Ä–ø–ª–∞—Ç–∞ –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤:\n"
            for consultant in all_consultants:
                salary = career_consultant_salaries.get(consultant.id, 0)
                if salary > 0:
                    # –†–∞—Å—á–µ—Ç —Å —É—á–µ—Ç–æ–º –ù–î–§–õ 6%
                    salary_with_tax = round(salary * 1.06, 2)
                    salary_report += f"üí∞ {consultant.full_name} ({consultant.telegram}): {salary} —Ä—É–±. (—Å –ù–î–§–õ {salary_with_tax})\n"
                else:
                    salary_report += f"‚ùå {consultant.full_name} ({consultant.telegram}): –£ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –Ω–µ—Ç –∫–æ–º–∏—Å—Å–∏–π –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥\n"
            
            # –ò—Ç–æ–≥–æ –ö–ö —Å –ù–î–§–õ
            total_career_consultant_salaries_with_tax = round(total_career_consultant_salaries * 1.06, 2)
            salary_report += f"üìà –ò—Ç–æ–≥–æ –ö–ö: {int(total_career_consultant_salaries):,} —Ä—É–±. (—Å –ù–î–§–õ {int(total_career_consultant_salaries_with_tax):,})\n\n"
        
        # –û–±—â–∏–π –∏—Ç–æ–≥ —Å –ù–î–§–õ
        total_salaries_with_tax = round(total_salaries * 1.06, 2)
        salary_report += f"üí∏ –û–±—â–∏–π –∏—Ç–æ–≥: {int(total_salaries):,} —Ä—É–±. (—Å –ù–î–§–õ {int(total_salaries_with_tax):,})\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        salary_report += "\nüîç –•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É?"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        context.user_data['detailed_salary_data'] = {
            'mentor_salaries': mentor_salaries,
            'career_consultant_salaries': career_consultant_salaries,
            'detailed_logs': detailed_logs,
            'start_date': start_date_str,
            'end_date': end_date_str,
            'all_mentors': {m.id: m for m in all_mentors.values()},
            'all_consultants': {c.id: c for c in all_consultants}
        }

        await update.message.reply_text(
            salary_report,
            reply_markup=ReplyKeyboardMarkup(
                [["–î–∞, –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"], ["–ù–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"]],
                one_time_keyboard=True
            )
        )
        return "WAIT_FOR_DETAILED_SALARY"
    except ValueError as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return "WAIT_FOR_SALARY_DATES"
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—ã: {e}")
        logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        logger.error(f"‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—ã: {str(e)}")
        return "WAIT_FOR_SALARY_DATES"


async def select_mentor_by_direction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ–Ω—Ç–æ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    from data_base.models import Mentor

    course_type = context.user_data["course_type"]

    # –î–ª—è Fullstack: —Å–Ω–∞—á–∞–ª–∞ —Ä—É—á–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if course_type == "–§—É–ª–ª—Å—Ç–µ–∫" and "mentor_id" not in context.user_data:
        mentor_direction = "–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
        mentors = session.query(Mentor).filter(Mentor.direction == mentor_direction).all()
        if not mentors:
            await update.message.reply_text("‚ùå –ù–µ—Ç –º–µ–Ω—Ç–æ—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
            return COURSE_TYPE
        context.user_data["mentors_list"] = {m.full_name: m.id for m in mentors}
        await update.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—Ç–æ—Ä–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ):",
            reply_markup=ReplyKeyboardMarkup(
                [[name] for name in context.user_data["mentors_list"].keys()],
                one_time_keyboard=True
            )
        )
        return SELECT_MENTOR
    # –î–ª—è Fullstack: –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä—É—á–Ω–æ–≥–æ ‚Äî –∞–≤—Ç–æ
    elif course_type == "–§—É–ª–ª—Å—Ç–µ–∫" and "mentor_id" in context.user_data:
        mentor_direction = "–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
        mentors = session.query(Mentor).filter(Mentor.direction == mentor_direction).all()
        if not mentors:
            await update.message.reply_text("‚ùå –ù–µ—Ç –º–µ–Ω—Ç–æ—Ä–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return COURSE_TYPE
        context.user_data["mentors_list"] = {m.full_name: m.id for m in mentors}
        await update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—Ç–æ—Ä–∞ –¥–ª—è –∞–≤—Ç–æ-–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ):",
            reply_markup=ReplyKeyboardMarkup(
                [[name] for name in context.user_data["mentors_list"].keys()],
                one_time_keyboard=True
            )
        )
        return SELECT_MENTOR
    # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    if course_type == "–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
        mentor_direction = "–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    else:
        mentor_direction = "–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"

    mentors = session.query(Mentor).filter(Mentor.direction == mentor_direction).all()

    if not mentors:
        await update.message.reply_text("‚ùå –ù–µ—Ç –º–µ–Ω—Ç–æ—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return COURSE_TYPE

    context.user_data["mentors_list"] = {m.full_name: m.id for m in mentors}

    # –î–ª—è –∞–≤—Ç–æ –∏ —Ä—É—á–Ω–æ–≥–æ ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if course_type == "–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
        msg = "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—Ç–æ—Ä–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é: –ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    else:
        msg = "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—Ç–æ—Ä–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é: –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    await update.message.reply_text(
        msg,
        reply_markup=ReplyKeyboardMarkup(
            [[name] for name in context.user_data["mentors_list"].keys()],
            one_time_keyboard=True
        )
    )
    return SELECT_MENTOR

async def handle_mentor_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected = update.message.text.strip()
    mentors_list = context.user_data.get("mentors_list", {})

    if selected not in mentors_list:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        return SELECT_MENTOR

    course_type = context.user_data.get("course_type")
    # –î–ª—è Fullstack: —Å–Ω–∞—á–∞–ª–∞ —Ä—É—á–Ω–æ–π, –ø–æ—Ç–æ–º –∞–≤—Ç–æ
    if course_type == "–§—É–ª–ª—Å—Ç–µ–∫":
        # –ï—Å–ª–∏ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω —Ä—É—á–Ω–æ–π –º–µ–Ω—Ç–æ—Ä ‚Äî —Å–µ–π—á–∞—Å –≤—ã–±–∏—Ä–∞–µ–º –µ–≥–æ
        if "mentor_id" not in context.user_data:
            context.user_data["mentor_id"] = mentors_list[selected]
            # –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∞–≤—Ç–æ-–º–µ–Ω—Ç–æ—Ä–∞
            from data_base.models import Mentor
            mentors = session.query(Mentor).filter(Mentor.direction == "–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ").all()
            if not mentors:
                await update.message.reply_text("‚ùå –ù–µ—Ç –º–µ–Ω—Ç–æ—Ä–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return COURSE_TYPE
            context.user_data["mentors_list"] = {m.full_name: m.id for m in mentors}
            await update.message.reply_text(
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—Ç–æ—Ä–∞ –¥–ª—è –∞–≤—Ç–æ-–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ):",
                reply_markup=ReplyKeyboardMarkup(
                    [[name] for name in context.user_data["mentors_list"].keys()],
                    one_time_keyboard=True
                )
            )
            return SELECT_MENTOR
        else:
            # –°–µ–π—á–∞—Å –≤—ã–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ-–º–µ–Ω—Ç–æ—Ä–∞
            context.user_data["auto_mentor_id"] = mentors_list[selected]
            await update.message.reply_text("–û–±–∞ –º–µ–Ω—Ç–æ—Ä–∞ –≤—ã–±—Ä–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è:")
            return TOTAL_PAYMENT
    elif course_type == "–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
        context.user_data["auto_mentor_id"] = mentors_list[selected]
        context.user_data["mentor_id"] = None
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è:")
        return TOTAL_PAYMENT
    else:  # –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        context.user_data["mentor_id"] = mentors_list[selected]
        context.user_data["auto_mentor_id"] = None
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è:")
        return TOTAL_PAYMENT

async def handle_detailed_salary_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–ø–ª–∞—Ç–∞—Ö.
    """
    user_choice = update.message.text.strip()
    
    if user_choice == "–ù–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ":
        await update.message.reply_text(
            "–•–æ—Ä–æ—à–æ! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardMarkup([["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], one_time_keyboard=True)
        )
        return await exit_to_main_menu(update, context)
    
    elif user_choice == "–î–∞, –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏":
        detailed_data = context.user_data.get('detailed_salary_data')
        if not detailed_data:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—Ä–ø–ª–∞—Ç–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return await exit_to_main_menu(update, context)
        
        await update.message.reply_text("üìã –§–æ—Ä–º–∏—Ä—É—é –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ –º–µ–Ω—Ç–æ—Ä–∞–º
        mentor_salaries = detailed_data['mentor_salaries']
        detailed_logs = detailed_data['detailed_logs']
        all_mentors = detailed_data['all_mentors']
        
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–æ–≤ –ø–æ {len(mentor_salaries)} –º–µ–Ω—Ç–æ—Ä–∞–º")
        
        for mentor_id, salary in mentor_salaries.items():
            if salary > 0 and mentor_id in all_mentors:
                try:
                    mentor = all_mentors[mentor_id]
                    logger.info(f"–§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç –¥–ª—è –º–µ–Ω—Ç–æ—Ä–∞ {mentor.full_name}")
                    
                    detailed_report = await generate_mentor_detailed_report(
                        mentor, salary, detailed_logs.get(mentor_id, []), 
                        detailed_data['start_date'], detailed_data['end_date']
                    )
                    
                    logger.info(f"–û—Ç—á–µ—Ç –¥–ª—è {mentor.full_name} —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è—é...")
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
                    report_parts = split_long_message(detailed_report)
                    if len(report_parts) > 1:
                        logger.info(f"–û—Ç—á–µ—Ç –¥–ª—è {mentor.full_name} —Ä–∞–∑–±–∏—Ç –Ω–∞ {len(report_parts)} —á–∞—Å—Ç–µ–π")
                        for i, part in enumerate(report_parts, 1):
                            part_header = f"üìÑ –ß–∞—Å—Ç—å {i} –∏–∑ {len(report_parts)}:\n\n"
                            await update.message.reply_text(part_header + part)
                            await asyncio.sleep(0.3)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
                    else:
                        await update.message.reply_text(detailed_report)
                    
                    logger.info(f"–û—Ç—á–µ—Ç –¥–ª—è {mentor.full_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç—á–µ—Ç–æ–≤
                    import asyncio
                    await asyncio.sleep(0.5)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –º–µ–Ω—Ç–æ—Ä–∞ {mentor_id}: {e}")
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –º–µ–Ω—Ç–æ—Ä–∞ {mentor_id}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ –∫–∞—Ä—å–µ—Ä–Ω—ã–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞–º
        career_consultant_salaries = detailed_data['career_consultant_salaries']
        all_consultants = detailed_data['all_consultants']
        
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–æ–≤ –ø–æ {len(career_consultant_salaries)} –∫–∞—Ä—å–µ—Ä–Ω—ã–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞–º")
        
        for consultant_id, salary in career_consultant_salaries.items():
            if salary > 0 and consultant_id in all_consultants:
                try:
                    consultant = all_consultants[consultant_id]
                    logger.info(f"–§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç –¥–ª—è –ö–ö {consultant.full_name}")
                    
                    detailed_report = await generate_consultant_detailed_report(
                        consultant, salary, detailed_data['start_date'], detailed_data['end_date']
                    )
                    
                    logger.info(f"–û—Ç—á–µ—Ç –¥–ª—è –ö–ö {consultant.full_name} —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è—é...")
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
                    report_parts = split_long_message(detailed_report)
                    if len(report_parts) > 1:
                        logger.info(f"–û—Ç—á–µ—Ç –¥–ª—è –ö–ö {consultant.full_name} —Ä–∞–∑–±–∏—Ç –Ω–∞ {len(report_parts)} —á–∞—Å—Ç–µ–π")
                        for i, part in enumerate(report_parts, 1):
                            part_header = f"üìÑ –ß–∞—Å—Ç—å {i} –∏–∑ {len(report_parts)}:\n\n"
                            await update.message.reply_text(part_header + part)
                            await asyncio.sleep(0.3)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
                    else:
                        await update.message.reply_text(detailed_report)
                    
                    logger.info(f"–û—Ç—á–µ—Ç –¥–ª—è –ö–ö {consultant.full_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç—á–µ—Ç–æ–≤
                    await asyncio.sleep(0.5)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ö–ö {consultant_id}: {e}")
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ö–ö {consultant_id}: {e}")
        
        await update.message.reply_text(
            "‚úÖ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!",
            reply_markup=ReplyKeyboardMarkup([["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], one_time_keyboard=True)
        )
        return await exit_to_main_menu(update, context)
    
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: '–î–∞, –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏' –∏–ª–∏ '–ù–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'",
            reply_markup=ReplyKeyboardMarkup(
                [["–î–∞, –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"], ["–ù–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"]],
                one_time_keyboard=True
            )
        )
        return "WAIT_FOR_DETAILED_SALARY"


async def generate_mentor_detailed_report(mentor, salary, logs, start_date, end_date):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ –º–µ–Ω—Ç–æ—Ä–∞.
    """
    logger.info(f"–ù–∞—á–∏–Ω–∞—é —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –º–µ–Ω—Ç–æ—Ä–∞ {mentor.full_name}")
    
    try:
        salary_with_tax = round(salary * 1.06, 2)
        
        report = f"üë®‚Äçüè´ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ –º–µ–Ω—Ç–æ—Ä–∞\n"
        report += f"üë§ {mentor.full_name} ({mentor.telegram})\n"
        report += f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n"
        report += f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {salary} —Ä—É–±. (—Å –ù–î–§–õ {salary_with_tax})\n\n"
        
        logger.info(f"–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è {mentor.full_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        
        # –ü–æ–¥—Å—á—ë—Ç –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã –∏ –ø–æ—Å—Ç–æ–ø–ª–∞—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
        try:
            period_start = datetime.strptime(start_date, "%d.%m.%Y").date()
            period_end = datetime.strptime(end_date, "%d.%m.%Y").date()
        except Exception:
            period_start = None
            period_end = None

        total_initial = 0.0
        total_additional = 0.0
        total_commission = 0.0

        if period_start and period_end:
            payments_q = session.query(Payment, Student).join(Student, Student.id == Payment.student_id).filter(
                Payment.payment_date >= period_start,
                Payment.payment_date <= period_end,
                Payment.status == "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
                Payment.mentor_id == mentor.id
            ).all()

            for payment, student in payments_q:
                comment_lower = (payment.comment or "").lower()
                amount = float(payment.amount)
                if "–ø–µ—Ä–≤–æ–Ω–∞—á" in comment_lower:
                    total_initial += amount
                elif "–¥–æ–ø–ª–∞—Ç" in comment_lower:
                    total_additional += amount
                elif "–∫–æ–º–∏—Å—Å–∏" in comment_lower:
                    total_commission += amount

        total_prepayment = round(total_initial + total_additional, 2)
        total_postpayment = round(total_commission, 2)
        tax_amount = round(salary * 0.06, 2)

        # –í—ã—á–∏—Å–ª—è–µ–º —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã (20% –æ—Ç —Å—É–º–º)
        from_students = round(total_prepayment * 0.2, 2)  # —Å —É—á–µ–Ω–∏–∫–æ–≤ (–ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π + –¥–æ–ø–ª–∞—Ç–∞)
        from_offers = round(total_postpayment * 0.2, 2)   # —Å –æ—Ñ—Ñ–µ—Ä–∞ (–∫–æ–º–∏—Å—Å–∏—è)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–±–∏–≤–∫—É –∑–∞—Ä–ø–ª–∞—Ç—ã –ø–æ—Å–ª–µ –∏—Ç–æ–≥–æ–≤–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã
        report += f"üìä –°–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã:\n"
        report += f"| —Å —É—á–µ–Ω–∏–∫–æ–≤ {from_students} —Ä—É–±. |\n"
        report += f"| —Å –æ—Ñ—Ñ–µ—Ä–∞ {from_offers} —Ä—É–±. |\n"
        report += f"| –Ω–∞–ª–æ–≥ {tax_amount} —Ä—É–±. |\n\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 20% –æ—Ç —Å—É–º–º
        prepayment_20_percent = round(total_prepayment * 0.2, 2)
        postpayment_20_percent = round(total_postpayment * 0.2, 2)

        report += f"–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ (–ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π + –¥–æ–ø–ª–∞—Ç–∞): {prepayment_20_percent} —Ä—É–±. (20% –æ—Ç {total_prepayment} —Ä—É–±.)\n"
        report += f"–ü–æ—Å—Ç–æ–ø–ª–∞—Ç–∞ (–∫–æ–º–∏—Å—Å–∏—è): {postpayment_20_percent} —Ä—É–±. (20% –æ—Ç {total_postpayment} —Ä—É–±.)\n"
        report += f"–ù–∞–ª–æ–≥ 6% –∫ —É–ø–ª–∞—Ç–µ: {tax_amount} —Ä—É–±.\n\n"

        if logs:
            report += "üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–ø–ª–∞—Ç:\n"
            for log in logs:
                # –û—á–∏—â–∞–µ–º –ª–æ–≥ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                clean_log = log.replace("‚Äî ", "").replace("üíº ", "").replace("üîÅ ", "")
                report += f"‚Ä¢ {clean_log}\n"
        else:
            report += "üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–ø–ª–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
        
        logger.info(f"–û—Ç—á–µ—Ç –¥–ª—è {mentor.full_name} –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
        return report
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –º–µ–Ω—Ç–æ—Ä–∞ {mentor.full_name}: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}"


async def generate_consultant_detailed_report(consultant, salary, start_date, end_date):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞.
    """
    logger.info(f"–ù–∞—á–∏–Ω–∞—é —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ö–ö {consultant.full_name}")
    
    salary_with_tax = round(salary * 1.06, 2)
    
    report = f"üíº –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞\n"
    report += f"üë§ {consultant.full_name} ({consultant.telegram})\n"
    report += f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n"
    report += f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {salary} —Ä—É–±. (—Å –ù–î–§–õ {salary_with_tax})\n\n"
    
    logger.info(f"–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ö–ö {consultant.full_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–æ–º–∏—Å—Å–∏—è–º
    from data_base.models import Payment, Student
    
    commission_payments = session.query(Payment).filter(
        Payment.student_id.in_(
            session.query(Student.id).filter(Student.career_consultant_id == consultant.id)
        ),
        Payment.payment_date >= datetime.strptime(start_date, "%d.%m.%Y").date(),
        Payment.payment_date <= datetime.strptime(end_date, "%d.%m.%Y").date(),
        Payment.status == "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
        Payment.comment.ilike("%–∫–æ–º–∏—Å—Å–∏%")
    ).all()
    
    # –ü–æ–¥—Å—á—ë—Ç –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã –∏ –ø–æ—Å—Ç–æ–ø–ª–∞—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏)
    try:
        period_start = datetime.strptime(start_date, "%d.%m.%Y").date()
        period_end = datetime.strptime(end_date, "%d.%m.%Y").date()
    except Exception:
        period_start = None
        period_end = None

    total_initial = 0.0
    total_additional = 0.0
    total_commission = 0.0

    if period_start and period_end:
        student_ids_subq = session.query(Student.id).filter(Student.career_consultant_id == consultant.id)
        payments_q = session.query(Payment).filter(
            Payment.student_id.in_(student_ids_subq),
            Payment.payment_date >= period_start,
            Payment.payment_date <= period_end,
            Payment.status == "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
        ).all()

        for payment in payments_q:
            comment_lower = (payment.comment or "").lower()
            amount = float(payment.amount)
            if "–ø–µ—Ä–≤–æ–Ω–∞—á" in comment_lower:
                total_initial += amount
            elif "–¥–æ–ø–ª–∞—Ç" in comment_lower:
                total_additional += amount
            elif "–∫–æ–º–∏—Å—Å–∏" in comment_lower:
                total_commission += amount

    total_prepayment = round(total_initial + total_additional, 2)
    total_postpayment = round(total_commission, 2)
    tax_amount = round(salary * 0.06, 2)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 20% –æ—Ç —Å—É–º–º
    prepayment_20_percent = round(total_prepayment * 0.2, 2)
    postpayment_20_percent = round(total_postpayment * 0.2, 2)

    report += f"–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ (–ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π + –¥–æ–ø–ª–∞—Ç–∞): {prepayment_20_percent} —Ä—É–±. (20% –æ—Ç {total_prepayment} —Ä—É–±.)\n"
    report += f"–ü–æ—Å—Ç–æ–ø–ª–∞—Ç–∞ (–∫–æ–º–∏—Å—Å–∏—è): {postpayment_20_percent} —Ä—É–±. (20% –æ—Ç {total_postpayment} —Ä—É–±.)\n"
    report += f"–ù–∞–ª–æ–≥ 6% –∫ —É–ø–ª–∞—Ç–µ: {tax_amount} —Ä—É–±.\n\n"

    if commission_payments:
        report += "üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∏—Å—Å–∏–π (10% –æ—Ç –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞):\n"
        for payment in commission_payments:
            student = session.query(Student).filter(Student.id == payment.student_id).first()
            if student:
                commission_amount = round(float(payment.amount) * 0.1, 2)
                report += f"‚Ä¢ {student.fio} ({student.telegram}): {payment.amount} —Ä—É–±. ‚Üí {commission_amount} —Ä—É–±.\n"
                report += f"  üìÖ {payment.payment_date} | üí¨ {payment.comment}\n"
    else:
        report += "üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∏—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
    
    return report
