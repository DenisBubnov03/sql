"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ó–ü –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–ª–ª—Å—Ç–µ–∫ –∫—É—Ä—Å–∞ –ø–æ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ.
"""
from datetime import datetime, date
from sqlalchemy import func
from data_base.db import session
from data_base.models import Student, FullstackTopicAssign, Mentor
from commands.fullstack_constants import TOPIC_FIELD_MAPPING, AUTO_MODULE_FIELD_MAPPING
from commands.logger import custom_logger

logger = custom_logger

def calculate_fullstack_salary(start_date: date, end_date: date):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ó–ü –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–º–µ–Ω—Ç–æ—Ä–æ–≤ ID 1 –∏ 3) –∑–∞ —Ñ—É–ª–ª—Å—Ç–µ–∫ –∫—É—Ä—Å—ã.
    
    Args:
        start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞
        end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞
        
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –ó–ü –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
    """
    logger.info(f"üìä –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç –ó–ü –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞ —Ñ—É–ª–ª—Å—Ç–µ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏–Ω—è—Ç—ã—Ö —Ç–µ–º –∑–∞ –ø–µ—Ä–∏–æ–¥ –¢–û–õ–¨–ö–û –æ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (ID 1 –∏ 3)
    topic_assignments = session.query(FullstackTopicAssign).join(Student).filter(
        Student.training_type == "–§—É–ª–ª—Å—Ç–µ–∫",
        FullstackTopicAssign.mentor_id.in_([1, 3]),  # –¢–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        func.date(FullstackTopicAssign.assigned_at) >= start_date,
        func.date(FullstackTopicAssign.assigned_at) <= end_date
    ).all()
    
    logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏–Ω—è—Ç—ã—Ö —Ç–µ–º –∑–∞ –ø–µ—Ä–∏–æ–¥: {len(topic_assignments)}")
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    logger.info("üîç DEBUG: –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏–Ω—è—Ç—ã—Ö —Ç–µ–º:")
    for assignment in topic_assignments:
        topic_info = f"–†—É—á–Ω–∞—è: {assignment.topic_manual}" if assignment.topic_manual else f"–ê–≤—Ç–æ: {assignment.topic_auto}"
        logger.info(f"  ‚Ä¢ ID {assignment.id}: –°—Ç—É–¥–µ–Ω—Ç {assignment.student_id}, –ú–µ–Ω—Ç–æ—Ä {assignment.mentor_id} | {topic_info} | {assignment.assigned_at}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    director_salaries = {
        1: 0.0,  # –†—É—á–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä
        3: 0.0   # –ê–≤—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä
    }
    detailed_logs = {
        1: [],
        3: []
    }
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º
    students_data = {}
    for assignment in topic_assignments:
        student_id = assignment.student_id
        if student_id not in students_data:
            student = session.query(Student).filter(Student.id == student_id).first()
            students_data[student_id] = {
                'student': student,
                'manual_topics': 0,
                'auto_topics': 0
            }
        
        # –°—á–∏—Ç–∞–µ–º —Ç–µ–º—ã –ø–æ —Ç–∏–ø–∞–º –¢–û–õ–¨–ö–û –æ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if assignment.mentor_id == 1 and assignment.topic_manual is not None:
            students_data[student_id]['manual_topics'] += 1
        if assignment.mentor_id == 3 and assignment.topic_auto is not None:
            students_data[student_id]['auto_topics'] += 1
    
    logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –ø—Ä–∏–Ω—è—Ç—ã–º–∏ —Ç–µ–º–∞–º–∏: {len(students_data)}")
    
    for student_id, data in students_data.items():
        student = data['student']
        logger.info(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞: {student.fio} (ID {student.id})")
        
        # –ü–æ–ª—É—á–∞–µ–º total_cost —Å—Ç—É–¥–µ–Ω—Ç–∞
        total_cost = float(student.total_cost) if student.total_cost else 0
        if total_cost == 0:
            logger.warning(f"‚ö†Ô∏è –£ —Å—Ç—É–¥–µ–Ω—Ç–∞ {student.fio} total_cost = 0, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue
            
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —Å–æ–∑–≤–æ–Ω–∞ (30% –æ—Ç total_cost)
        call_cost = total_cost * 0.3
        
        # === –†–ê–°–ß–ï–¢ –î–õ–Ø –†–£–ß–ù–û–ì–û –î–ò–†–ï–ö–¢–û–†–ê (ID = 1) ===
        manual_topics_count = len(TOPIC_FIELD_MAPPING)
        manual_call_price = call_cost / manual_topics_count if manual_topics_count > 0 else 0
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–¥—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Ä—É—á–Ω—ã–µ —Ç–µ–º—ã
        manual_accepted_topics = data['manual_topics']
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"üîç DEBUG: –°—Ç—É–¥–µ–Ω—Ç {student.fio} (ID {student.id})")
        logger.info(f"üîç DEBUG: –†—É—á–Ω—ã—Ö —Ç–µ–º –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞: {manual_accepted_topics}")
        logger.info(f"üîç DEBUG: –ê–≤—Ç–æ —Ç–µ–º –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞: {data['auto_topics']}")
        
        manual_salary = manual_accepted_topics * manual_call_price
        director_salaries[1] += manual_salary
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
        if manual_accepted_topics > 0:
            detailed_logs[1].append(
                f"üíº –†—É—á–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä –ø—Ä–∏–Ω—è–ª {manual_accepted_topics} —Ç–µ–º —É —Å—Ç—É–¥–µ–Ω—Ç–∞ {student.fio} (ID {student.id}) | "
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–∑–≤–æ–Ω–∞: {round(manual_call_price, 2)} —Ä—É–±. | "
                f"–ó–ü: +{round(manual_salary, 2)} —Ä—É–±."
            )
            logger.info(f"üìä –†—É—á–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä: {manual_accepted_topics} —Ç–µ–º, –ó–ü +{round(manual_salary, 2)} —Ä—É–±.")
        
        # === –†–ê–°–ß–ï–¢ –î–õ–Ø –ê–í–¢–û –î–ò–†–ï–ö–¢–û–†–ê (ID = 3) ===
        auto_modules_count = len(AUTO_MODULE_FIELD_MAPPING)
        auto_call_price = call_cost / auto_modules_count if auto_modules_count > 0 else 0
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–¥—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ —Ç–µ–º—ã
        auto_accepted_topics = data['auto_topics']
        
        auto_salary = auto_accepted_topics * auto_call_price
        director_salaries[3] += auto_salary
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –∞–≤—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
        if auto_accepted_topics > 0:
            detailed_logs[3].append(
                f"üíº –ê–≤—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä –ø—Ä–∏–Ω—è–ª {auto_accepted_topics} –º–æ–¥—É–ª–µ–π —É —Å—Ç—É–¥–µ–Ω—Ç–∞ {student.fio} (ID {student.id}) | "
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–∑–≤–æ–Ω–∞: {round(auto_call_price, 2)} —Ä—É–±. | "
                f"–ó–ü: +{round(auto_salary, 2)} —Ä—É–±."
            )
            logger.info(f"üìä –ê–≤—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä: {auto_accepted_topics} –º–æ–¥—É–ª–µ–π, –ó–ü +{round(auto_salary, 2)} —Ä—É–±.")
    
    # –ò—Ç–æ–≥–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.info(f"üìä –ò—Ç–æ–≥–æ–≤—ã–µ –ó–ü –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    logger.info(f"üìä –†—É—á–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä (ID 1): {round(director_salaries[1], 2)} —Ä—É–±.")
    logger.info(f"üìä –ê–≤—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä (ID 3): {round(director_salaries[3], 2)} —Ä—É–±.")
    
    return {
        'salaries': director_salaries,
        'logs': detailed_logs,
        'students_processed': len(students_data),
        'topics_processed': len(topic_assignments)
    }


def get_fullstack_salary_summary(start_date: date, end_date: date):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ –ó–ü –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞ —Ñ—É–ª–ª—Å—Ç–µ–∫.
    
    Args:
        start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞
        end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞
        
    Returns:
        str: –¢–µ–∫—Å—Ç–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    """
    result = calculate_fullstack_salary(start_date, end_date)
    
    summary = f"üìä –ó–ü –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞ —Ñ—É–ª–ª—Å—Ç–µ–∫ ({start_date} - {end_date}):\n\n"
    summary += f"üë®‚Äçüè´ –†—É—á–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä (ID 1): {round(result['salaries'][1], 2)} —Ä—É–±.\n"
    summary += f"ü§ñ –ê–≤—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä (ID 3): {round(result['salaries'][3], 2)} —Ä—É–±.\n\n"
    summary += f"üìà –ò—Ç–æ–≥–æ: {round(result['salaries'][1] + result['salaries'][3], 2)} —Ä—É–±.\n"
    summary += f"üë• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {result['students_processed']}\n"
    
    return summary
