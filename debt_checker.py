import json
import asyncio
import os
from datetime import datetime, timedelta
from sqlalchemy import desc
from telegram import Bot
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

from data_base.db import session
from data_base.models import Student, Payment

# ADMIN_CHAT_ID = 325531224
ADMIN_CHAT_ID = 1257163820
DEBT_DAYS_THRESHOLD = 30
STATE_FILE = "prev_debtors.json"
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")


def get_current_debtors():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ Telegram-–¥–æ–ª–∂–Ω–∏–∫–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç—ë–∂ –±—ã–ª –±–æ–ª–µ–µ 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥."""
    cutoff_date = datetime.now().date() - timedelta(days=DEBT_DAYS_THRESHOLD)
    debtors = []

    students = session.query(Student).filter(
        Student.total_cost > Student.payment_amount,
        Student.training_status != "–Ω–µ —É—á–∏—Ç—Å—è"
    ).all()

    for student in students:
        last_payment = session.query(Payment.payment_date).filter(
            Payment.student_id == student.id,
            Payment.comment != "–ö–æ–º–∏—Å—Å–∏—è"
        ).order_by(desc(Payment.payment_date)).first()

        if not last_payment or last_payment[0] <= cutoff_date:
            debtors.append(student.telegram)

    return sorted(debtors)


def load_previous_debtors():
    try:
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return []


def save_current_debtors(debtors):
    with open(STATE_FILE, "w", encoding="utf-8") as f:
        json.dump(sorted(debtors), f, ensure_ascii=False, indent=2)


async def notify_new_debtors(new_debtors):
    if not TELEGRAM_TOKEN or not ADMIN_CHAT_ID:
        print("‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram –±–æ—Ç–∞")
        return
        
    try:
        bot = Bot(token=TELEGRAM_TOKEN)
        message = "‚ùóÔ∏è –ù–æ–≤—ã–µ –¥–æ–ª–∂–Ω–∏–∫–∏:\n" + "\n".join(new_debtors)
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=message)
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ {len(new_debtors)} –Ω–æ–≤—ã—Ö –¥–æ–ª–∂–Ω–∏–∫–∞—Ö")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def notify_resolved_debtors(resolved_debtors):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –¥–æ–ª–∂–Ω–∏–∫–∞–º–∏."""
    if not resolved_debtors:
        return
    
    if not TELEGRAM_TOKEN or not ADMIN_CHAT_ID:
        print("‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram –±–æ—Ç–∞")
        return
        
    try:
        bot = Bot(token=TELEGRAM_TOKEN)
        message = "‚úÖ –†–µ—à–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ–ª–∂–Ω–∏–∫–∞–º–∏:\n" + "\n".join(resolved_debtors)
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=message)
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ {len(resolved_debtors)} —Ä–µ—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö: {e}")

async def notify_cron_job_completed():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ cron job."""
    if not TELEGRAM_TOKEN:
        return
        
    try:
        bot = Bot(token=TELEGRAM_TOKEN)
        message = "‚úÖ Cron job –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ª–∂–Ω–∏–∫–æ–≤"
        await bot.send_message(chat_id=1257163820, text=message)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")


async def check_new_debtors():
    current_debtors = get_current_debtors()
    previous_debtors = load_previous_debtors()

    # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã—Ö –¥–æ–ª–∂–Ω–∏–∫–æ–≤
    new_debtors = [d for d in current_debtors if d not in previous_debtors]
    
    # –ù–∞—Ö–æ–¥–∏–º —Ä–µ—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (–±—ã–ª–∏ –≤ —Å–ø–∏—Å–∫–µ, –Ω–æ –±–æ–ª—å—à–µ –Ω–µ—Ç)
    resolved_debtors = [d for d in previous_debtors if d not in current_debtors]

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤—ã—Ö –¥–æ–ª–∂–Ω–∏–∫–∞—Ö
    if new_debtors:
        await notify_new_debtors(new_debtors)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
    if resolved_debtors:
        await notify_resolved_debtors(resolved_debtors)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if sorted(current_debtors) != sorted(previous_debtors):
        save_current_debtors(current_debtors)
        print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {len(current_debtors)} –¥–æ–ª–∂–Ω–∏–∫–æ–≤")
        if resolved_debtors:
            print(f"‚úÖ –†–µ—à–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(resolved_debtors)}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ cron job
    await notify_cron_job_completed()


if __name__ == "__main__":
    asyncio.run(check_new_debtors())
