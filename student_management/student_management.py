import logging

from data_base import Session
from data_base.db import session
from data_base.models import Student, Payment


logger = logging.getLogger(__name__)


def add_student(fio, telegram, start_date, training_type, total_cost, payment_amount, fully_paid, commission, mentor_id, auto_mentor_id=None):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID.
    """
    try:
        student = Student(
            fio=fio,
            telegram=telegram,
            start_date=start_date,
            training_type=training_type,
            total_cost=total_cost,
            payment_amount=payment_amount,  # –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            fully_paid=fully_paid,
            commission=commission,
            mentor_id=mentor_id,
            auto_mentor_id=auto_mentor_id
        )

        session.add(student)
        session.commit()  # üîπ –¢–µ–ø–µ—Ä—å ID –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω
        session.refresh(student)  # üîπ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º `id`

        print(f"‚úÖ DEBUG: –°—Ç—É–¥–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω! ID = {student.id}, –ò–º—è = {fio}")

        return student.id  # ‚úÖ –¢–µ–ø–µ—Ä—å `id` —Ç–æ—á–Ω–æ –µ—Å—Ç—å

    except Exception as e:
        session.rollback()
        print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")
        return None




from datetime import datetime


def update_student_data(identifier, new_payment, payment_date):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞, —É—á–∏—Ç—ã–≤–∞—è –¥–æ–ø–ª–∞—Ç—É –∏ –¥–∞—Ç—É –ø–ª–∞—Ç–µ–∂–∞.

    Args:
        identifier (str | int): ID, –§–ò–û –∏–ª–∏ Telegram —Å—Ç—É–¥–µ–Ω—Ç–∞.
        new_payment (float): –°—É–º–º–∞ –¥–æ–ø–ª–∞—Ç—ã.
        payment_date (datetime.date): –î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞.

    Returns:
        bool: True, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False.
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∏—Å–ª–æ–º (ID) –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π (–§–ò–û/Telegram)
        if isinstance(identifier, int) or (isinstance(identifier, str) and identifier.isdigit()):
            student = session.query(Student).filter(Student.id == int(identifier)).first()
        else:
            student = session.query(Student).filter(
                (Student.fio == identifier) | (Student.telegram == identifier)
            ).first()

        if not student:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–ª–∞—Ç–µ–∂ –≤ —ç—Ç–æ–º –∂–µ –º–µ—Å—è—Ü–µ
        if student.extra_payment_date and student.extra_payment_date.strftime("%m.%Y") == payment_date.strftime(
                "%m.%Y"):
            # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ, —Å—É–º–º–∏—Ä—É–µ–º –¥–æ–ø–ª–∞—Ç—É
            student.extra_payment_amount += new_payment
        else:
            # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –º–µ—Å—è—Ü, –∑–∞–º–µ–Ω—è–µ–º —Å—É–º–º—É –¥–æ–ø–ª–∞—Ç—ã –∏ –¥–∞—Ç—É
            student.extra_payment_amount = new_payment
            student.extra_payment_date = payment_date

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –æ–ø–ª–∞—Ç
        updated_payment = student.payment_amount + new_payment

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –æ–ø–ª–∞—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞
        if updated_payment > student.total_cost:
            session.rollback()
            raise ValueError(
                f"–û—à–∏–±–∫–∞: –æ–±—â–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã ({updated_payment:.2f} —Ä—É–±.) "
                f"–ø—Ä–µ–≤—ã—à–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è ({student.total_cost:.2f} —Ä—É–±.)."
            )

        student.payment_amount = updated_payment

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª–Ω–æ—Å—Ç—å—é –ª–∏ –æ–ø–ª–∞—á–µ–Ω –∫—É—Ä—Å
        student.fully_paid = "–î–∞" if student.payment_amount >= student.total_cost else "–ù–µ—Ç"

        session.commit()
        return True
    except Exception as e:
        session.rollback()
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")


def get_all_students():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.

    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–æ–≤.
    """
    try:
        return session.query(Student).all()
    except Exception as e:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {e}")
