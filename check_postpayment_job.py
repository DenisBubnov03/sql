#!/usr/bin/env python3
"""
–î–∂–æ–±–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–æ–ø–ª–∞—Ç—ã (–∫–æ–º–∏—Å—Å–∏–π) —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–£—Å—Ç—Ä–æ–∏–ª—Å—è".
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–ø–ª–∞—Ç—ã.
"""

import os
import sys
import json
import asyncio
from datetime import datetime, date, timedelta
from sqlalchemy import func
from telegram import Bot
from telegram.error import TelegramError

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from data_base.db import session
from data_base.models import Student, Payment
from commands.logger import custom_logger

logger = custom_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')  # ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
STATE_FILE = "prev_postpayment_issues.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
from dotenv import load_dotenv
load_dotenv()

# –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ .env
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')

def calculate_commission(student):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â—É—é –∫–æ–º–∏—Å—Å–∏—é –∏ —É–∂–µ –≤—ã–ø–ª–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—É –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞.
    """
    try:
        if not student.commission:
            return 0, 0
            
        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–ª–∞—Ç, –ø—Ä–æ—Ü–µ–Ω—Ç)
        commission_info = student.commission.split(", ")
        payments = int(commission_info[0]) if len(commission_info) > 0 and commission_info[0].isdigit() else 0
        percentage = int(commission_info[1].replace("%", "")) if len(commission_info) > 1 else 0

        # –ó–∞—Ä–ø–ª–∞—Ç–∞
        salary = student.salary or 0

        # –†–∞—Å—á—ë—Ç –æ–±—â–µ–π –∫–æ–º–∏—Å—Å–∏–∏
        total_commission = (salary * percentage / 100) * payments

        # –í—ã–ø–ª–∞—á–µ–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è
        paid_commission = student.commission_paid or 0

        return total_commission, paid_commission
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student.id}: {e}")
        return 0, 0

def get_last_commission_payment_date(student_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º "–ö–æ–º–∏—Å—Å–∏—è" –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞.
    """
    try:
        last_payment = session.query(Payment).filter(
            Payment.student_id == student_id,
            Payment.comment.ilike("%–∫–æ–º–∏—Å—Å–∏%"),
            Payment.status == "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
        ).order_by(Payment.payment_date.desc()).first()
        
        return last_payment.payment_date if last_payment else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_id}: {e}")
        return None

def get_employment_date(student):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞.
    """
    try:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–∞—Ç–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ø–æ–ª–µ employment_date
        # –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—è –Ω–µ—Ç, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –ø–æ–ª–µ –∏–ª–∏ –ª–æ–≥–∏–∫—É
        if hasattr(student, 'employment_date') and student.employment_date:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–±—ä–µ–∫—Ç date, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–∞
            if isinstance(student.employment_date, str):
                try:
                    return datetime.strptime(student.employment_date, "%Y-%m-%d").date()
                except:
                    return None
            return student.employment_date
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂ "–ö–æ–º–∏—Å—Å–∏—è" –∫–∞–∫ –¥–∞—Ç—É —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        last_commission_date = get_last_commission_payment_date(student.id)
        if last_commission_date:
            return last_commission_date
            
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç—ã —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student.id}: {e}")
        return None

def get_current_postpayment_issues():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –ø–æ—Å—Ç–æ–ø–ª–∞—Ç—ã.
    """
    logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É—Å–ª–æ–≤–∏–π –ø–æ—Å—Ç–æ–ø–ª–∞—Ç—ã...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–£—Å—Ç—Ä–æ–∏–ª—Å—è"
    employed_students = session.query(Student).filter(
        Student.training_status == "–£—Å—Ç—Ä–æ–∏–ª—Å—è"
    ).all()
    
    logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–£—Å—Ç—Ä–æ–∏–ª—Å—è': {len(employed_students)}")
    
    issues = []
    current_date = date.today()
    one_month_ago = current_date - timedelta(days=30)
    
    for student in employed_students:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é –∏ –≤—ã–ø–ª–∞—á–µ–Ω–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é
            total_commission, paid_commission = calculate_commission(student)
            
            if total_commission == 0:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–ª–∞—á–µ–Ω–∞ –ª–∏ –≤—Å—è –∫–æ–º–∏—Å—Å–∏—è
            if paid_commission >= total_commission:
                continue  # –ö–æ–º–∏—Å—Å–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–ª–∞—á–µ–Ω–∞
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            employment_date = get_employment_date(student)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∫–æ–º–∏—Å—Å–∏–∏
            last_commission_date = get_last_commission_payment_date(student.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            issue_reasons = []
            
            # –£—Å–ª–æ–≤–∏–µ 1: –°—É–º–º–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ –Ω–µ —Ä–∞–≤–Ω–∞ —Å—É–º–º–µ –ø–æ–ª–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏
            if paid_commission < total_commission:
                issue_reasons.append(f"–ù–µ–ø–æ–ª–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏: {paid_commission}/{total_commission} —Ä—É–±.")
            
            # –£—Å–ª–æ–≤–∏–µ 2: –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π "–ö–æ–º–∏—Å—Å–∏—è" + —É—Å—Ç—Ä–æ–∏–ª—Å—è –±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥
            if (not last_commission_date and employment_date and 
                employment_date < one_month_ago):
                issue_reasons.append("–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π '–ö–æ–º–∏—Å—Å–∏—è' + —É—Å—Ç—Ä–æ–∏–ª—Å—è –±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥")
            
            # –£—Å–ª–æ–≤–∏–µ 3: –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂ "–ö–æ–º–∏—Å—Å–∏—è" –±—ã–ª –±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥ –∏ –Ω–µ –≤—Å–µ –≤—ã–ø–ª–∞—Ç–∏–ª
            if (last_commission_date and last_commission_date < one_month_ago and 
                paid_commission < total_commission):
                issue_reasons.append("–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂ '–ö–æ–º–∏—Å—Å–∏—è' –±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥ + –Ω–µ–ø–æ–ª–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
            if issue_reasons:
                issues.append({
                    'student_id': student.id,
                    'student_name': student.fio,
                    'student_telegram': student.telegram,
                    'total_commission': total_commission,
                    'paid_commission': paid_commission,
                    'employment_date': str(employment_date) if employment_date else None,
                    'last_commission_date': str(last_commission_date) if last_commission_date else None,
                    'reasons': issue_reasons
                })
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ {student.id}: {e}")
            continue
    
    logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –ø–æ—Å—Ç–æ–ø–ª–∞—Ç—ã: {len(issues)}")
    return issues

def load_previous_issues():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return []

def save_current_issues(issues):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º –≤ —Ñ–∞–π–ª."""
    with open(STATE_FILE, "w", encoding="utf-8") as f:
        json.dump(issues, f, ensure_ascii=False, indent=2)

async def notify_new_issues(new_issues):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ø–æ—Å—Ç–æ–ø–ª–∞—Ç–æ–π."""
    if not TELEGRAM_BOT_TOKEN or not ADMIN_CHAT_ID:
        logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram –±–æ—Ç–∞")
        logger.info("üìã –ù–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ—Å—Ç–æ–ø–ª–∞—Ç–æ–π:")
        for issue in new_issues:
            logger.info(f"  ‚Ä¢ {issue['student_name']} ({issue['student_telegram']})")
            logger.info(f"    üí∞ –ö–æ–º–∏—Å—Å–∏—è: {issue['paid_commission']}/{issue['total_commission']} —Ä—É–±.")
            if issue['last_commission_date']:
                logger.info(f"    üí≥ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂ –∫–æ–º–∏—Å—Å–∏–∏: {issue['last_commission_date']}")
            else:
                logger.info(f"    üí≥ –ü–ª–∞—Ç–µ–∂–µ–π –∫–æ–º–∏—Å—Å–∏–∏: –ù–ï–¢")
            for reason in issue['reasons']:
                logger.info(f"    ‚ö†Ô∏è {reason}")
        return
    
    if not new_issues:
        return
    
    try:
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
        
        message = "üö® –ù–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ—Å—Ç–æ–ø–ª–∞—Ç–æ–π:\n\n"
        
        for i, issue in enumerate(new_issues, 1):
            message += f"{i}. {issue['student_name']} (@{issue['student_telegram']})\n"
            message += f"   üí∞ –ö–æ–º–∏—Å—Å–∏—è: {issue['paid_commission']}/{issue['total_commission']} —Ä—É–±.\n"
            
            if issue['employment_date']:
                message += f"   üìÖ –£—Å—Ç—Ä–æ–∏–ª—Å—è: {issue['employment_date']}\n"
            
            if issue['last_commission_date']:
                message += f"   üí≥ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂ –∫–æ–º–∏—Å—Å–∏–∏: {issue['last_commission_date']}\n"
            else:
                message += f"   üí≥ –ü–ª–∞—Ç–µ–∂–µ–π –∫–æ–º–∏—Å—Å–∏–∏: –ù–ï–¢\n"
            
            message += f"   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã:\n"
            for reason in issue['reasons']:
                message += f"      ‚Ä¢ {reason}\n"
            
            message += "\n"
        
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=message)
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ {len(new_issues)} –Ω–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö")
        
    except TelegramError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def notify_cron_job_completed():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ cron job."""
    if not TELEGRAM_BOT_TOKEN or not ADMIN_CHAT_ID:
        return
        
    try:
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
        message = "‚úÖ Cron job –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–æ–ø–ª–∞—Ç—ã"
        await bot.send_message(chat_id=1257163820, text=message)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

async def check_new_issues():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ—Å—Ç–æ–ø–ª–∞—Ç–æ–π –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.
    """
    current_issues = get_current_postpayment_issues()
    previous_issues = load_previous_issues()
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ student_id
    current_dict = {issue['student_id']: issue for issue in current_issues}
    previous_dict = {issue['student_id']: issue for issue in previous_issues}
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    new_issues = []
    for student_id, issue in current_dict.items():
        if student_id not in previous_dict:
            new_issues.append(issue)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
    if new_issues:
        await notify_new_issues(new_issues)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if sorted(current_issues, key=lambda x: x['student_id']) != sorted(previous_issues, key=lambda x: x['student_id']):
        save_current_issues(current_issues)
        logger.info(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {len(current_issues)} –ø—Ä–æ–±–ª–µ–º")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    await notify_cron_job_completed()

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∂–æ–±—ã.
    """
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –¥–∂–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–æ–ø–ª–∞—Ç—ã...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        await check_new_issues()
        
        logger.info("‚úÖ –î–∂–æ–±–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–æ–ø–ª–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –¥–∂–æ–±–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–æ–ø–ª–∞—Ç—ã: {e}")
        raise
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        try:
            session.close()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")

if __name__ == "__main__":
    asyncio.run(main())
