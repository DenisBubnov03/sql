import os

from telegram.ext import Application, CommandHandler, MessageHandler, filters

from commands.mentor_bonus_commands import start_bonus_process, handle_mentor_tg, handle_bonus_amount
from commands.start_commands import start, exit_to_main_menu
from commands.states import NOTIFICATION_MENU, STATISTICS_MENU, START_PERIOD, END_PERIOD, COURSE_TYPE_MENU, \
    CONFIRM_DELETE, WAIT_FOR_PAYMENT_DATE, SELECT_MENTOR, AWAIT_MENTOR_TG, AWAIT_BONUS_AMOUNT
from commands.student_commands import *
from commands.student_employment_commands import *
from commands.student_info_commands import *
from commands.student_management_command import *
from commands.student_notifications import check_call_notifications, check_payment_notifications, \
    check_all_notifications, show_notifications_menu
from commands.student_selection import *
from commands.student_statistic_commands import show_statistics_menu, show_general_statistics, show_course_type_menu, \
    show_manual_testing_statistics, show_automation_testing_statistics, show_fullstack_statistics, request_period_start, \
    handle_period_start, handle_period_end

# –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TELEGRAM_TOKEN = "6106505792:AAE7mlAus0SiuqKFVjHWaK8sOhe9i_6k0xQ"


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    add_student_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞$"), add_student_start)],
        states={
            FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_student_fio)],
            TELEGRAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_student_telegram)],
            START_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_student_date)],
            COURSE_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_student_course_type)],
            SELECT_MENTOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_mentor_selection)],
            TOTAL_PAYMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_student_total_payment)],
            PAID_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_student_paid_amount)],
            COMMISSION: [MessageHandler(filters.TEXT, add_student_commission)],
        },
        fallbacks=[],
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    edit_student_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞$"), edit_student)],
        states={
            FIO_OR_TELEGRAM: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, find_student),
                MessageHandler(filters.Regex("^–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), exit_to_main_menu)
            ],
            SELECT_STUDENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_multiple_students),
                MessageHandler(filters.Regex("^–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), exit_to_main_menu)
            ],
            FIELD_TO_EDIT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, edit_student_field),
                MessageHandler(filters.Regex("^–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), exit_to_main_menu)
            ],
            WAIT_FOR_NEW_VALUE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_new_value),
                MessageHandler(filters.Regex("^–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), exit_to_main_menu)
            ],
            CONFIRM_DELETE: [  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
                MessageHandler(filters.Regex("^(–î–∞, —É–¥–∞–ª–∏—Ç—å|–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞)$"), handle_student_deletion),
            ],
            WAIT_FOR_PAYMENT_DATE: [  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç —à–∞–≥
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_payment_date),
                MessageHandler(filters.Regex("^–°–µ–≥–æ–¥–Ω—è$"), handle_payment_date),  # –ö–Ω–æ–ø–∫–∞ "–°–µ–≥–æ–¥–Ω—è"
            ]
        },
        fallbacks=[MessageHandler(filters.Regex("^–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), exit_to_main_menu)]
    )

    search_student_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–ü–æ–∏—Å–∫ —É—á–µ–Ω–∏–∫–∞$"), search_student)],
        states={
            FIO_OR_TELEGRAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, display_student_info)],
        },
        fallbacks=[],
    )

    statistics_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), show_statistics_menu)],
        states={
            STATISTICS_MENU: [
                MessageHandler(filters.Regex("^üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), show_general_statistics),
                MessageHandler(filters.Regex("^üìö –ü–æ —Ç–∏–ø—É –æ–±—É—á–µ–Ω–∏—è$"), show_course_type_menu),
                MessageHandler(filters.Regex("^üìÖ –ü–æ –ø–µ—Ä–∏–æ–¥—É$"), request_period_start),
            ],
            START_PERIOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_period_start)],
            END_PERIOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_period_end)],
            COURSE_TYPE_MENU: [
                MessageHandler(filters.Regex("^üë®‚Äçüíª –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ$"), show_manual_testing_statistics),
                MessageHandler(filters.Regex("^ü§ñ –ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ$"), show_automation_testing_statistics),
                MessageHandler(filters.Regex("^üíª –§—É–ª–ª—Å—Ç–µ–∫$"), show_fullstack_statistics),
                MessageHandler(filters.Regex("^üîô –ù–∞–∑–∞–¥$"), show_statistics_menu),
            ],
        },
        fallbacks=[
            MessageHandler(filters.Regex("^üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é$"), exit_to_main_menu),
        ],
    )

    notifications_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è$"), show_notifications_menu)],
        states={
            NOTIFICATION_MENU: [
                MessageHandler(filters.Regex("^–ü–æ –∑–≤–æ–Ω–∫–∞–º$"), check_call_notifications),
                MessageHandler(filters.Regex("^–ü–æ –æ–ø–ª–∞—Ç–µ$"), check_payment_notifications),
                MessageHandler(filters.Regex("^–í—Å–µ$"), check_all_notifications),
            ],
            "NOTIFICATION_PROCESS": [
                MessageHandler(filters.Regex("^üîô –ù–∞–∑–∞–¥$"), show_notifications_menu),
            ],
        },
        fallbacks=[
            MessageHandler(filters.Regex("^üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), exit_to_main_menu),
        ],
    )
    salary_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É$"), request_salary_period)],
        states={
            "WAIT_FOR_SALARY_DATES": [MessageHandler(filters.TEXT & ~filters.COMMAND, calculate_salary)]
        },
        fallbacks=[]
    )

    bonus_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–ü—Ä–µ–º–∏—è –∫—É—Ä–∞—Ç–æ—Ä—É$"), start_bonus_process)],
        states={
            AWAIT_MENTOR_TG: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_mentor_tg)],
            AWAIT_BONUS_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_bonus_amount)],
        },
        fallbacks=[MessageHandler(filters.Regex("^–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), exit_to_main_menu)],
    )
    application.add_handler(bonus_handler)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(salary_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(add_student_handler)
    application.add_handler(edit_student_handler)
    application.add_handler(search_student_handler)
    application.add_handler(statistics_handler)
    application.add_handler(notifications_handler)

    # application.add_handler(MessageHandler(filters.Regex("–û—Ç–º–µ–Ω–∞"), cancel))  # –î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞
    # application.add_handler(MessageHandler(filters.ALL, debug))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()
